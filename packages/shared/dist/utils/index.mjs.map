{"version":3,"sources":["../../src/utils/makerkit.ts","../../src/utils/case/converters.ts","../../src/utils/date/formatters.ts","../../src/utils/string/manipulators.ts","../../../../node_modules/date-fns/constants.js","../../../../node_modules/date-fns/constructFrom.js","../../../../node_modules/date-fns/toDate.js","../../../../node_modules/date-fns/_lib/defaultOptions.js","../../../../node_modules/date-fns/startOfWeek.js","../../../../node_modules/date-fns/startOfISOWeek.js","../../../../node_modules/date-fns/getISOWeekYear.js","../../../../node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js","../../../../node_modules/date-fns/_lib/normalizeDates.js","../../../../node_modules/date-fns/startOfDay.js","../../../../node_modules/date-fns/differenceInCalendarDays.js","../../../../node_modules/date-fns/startOfISOWeekYear.js","../../../../node_modules/date-fns/isDate.js","../../../../node_modules/date-fns/isValid.js","../../../../node_modules/date-fns/startOfYear.js","../../../../node_modules/date-fns/locale/en-US/_lib/formatDistance.js","../../../../node_modules/date-fns/locale/_lib/buildFormatLongFn.js","../../../../node_modules/date-fns/locale/en-US/_lib/formatLong.js","../../../../node_modules/date-fns/locale/en-US/_lib/formatRelative.js","../../../../node_modules/date-fns/locale/_lib/buildLocalizeFn.js","../../../../node_modules/date-fns/locale/en-US/_lib/localize.js","../../../../node_modules/date-fns/locale/_lib/buildMatchFn.js","../../../../node_modules/date-fns/locale/_lib/buildMatchPatternFn.js","../../../../node_modules/date-fns/locale/en-US/_lib/match.js","../../../../node_modules/date-fns/locale/en-US.js","../../../../node_modules/date-fns/getDayOfYear.js","../../../../node_modules/date-fns/getISOWeek.js","../../../../node_modules/date-fns/getWeekYear.js","../../../../node_modules/date-fns/startOfWeekYear.js","../../../../node_modules/date-fns/getWeek.js","../../../../node_modules/date-fns/_lib/addLeadingZeros.js","../../../../node_modules/date-fns/_lib/format/lightFormatters.js","../../../../node_modules/date-fns/_lib/format/formatters.js","../../../../node_modules/date-fns/_lib/format/longFormatters.js","../../../../node_modules/date-fns/_lib/protectedTokens.js","../../../../node_modules/date-fns/format.js","../../../../node_modules/date-fns/locale/ja/_lib/formatDistance.js","../../../../node_modules/date-fns/locale/ja/_lib/formatLong.js","../../../../node_modules/date-fns/locale/ja/_lib/formatRelative.js","../../../../node_modules/date-fns/locale/ja/_lib/localize.js","../../../../node_modules/date-fns/locale/ja/_lib/match.js","../../../../node_modules/date-fns/locale/ja.js","../../src/utils/format/formatters.ts","../../src/utils/error/handlers.ts"],"names":["defaultOptions","format","localize","formatLong","formatDistanceLocale","formatDistance","dateFormats","timeFormats","dateTimeFormats","formatRelativeLocale","formatRelative","eraValues","quarterValues","monthValues","dayValues","dayPeriodValues","formattingDayPeriodValues","ordinalNumber","matchOrdinalNumberPattern","parseOrdinalNumberPattern","matchEraPatterns","parseEraPatterns","matchQuarterPatterns","parseQuarterPatterns","matchMonthPatterns","parseMonthPatterns","matchDayPatterns","parseDayPatterns","matchDayPeriodPatterns","parseDayPeriodPatterns","match"],"mappings":"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","file":"index.mjs","sourcesContent":["/**\n * Check if the code is running in a browser environment.\n */\nexport function isBrowser() {\n  return typeof window !== 'undefined';\n}\n\n/**\n * @name formatCurrency\n * @description Format the currency based on the currency code\n */\nexport function formatCurrency(params: {\n  currencyCode: string;\n  locale: string;\n  value: string | number;\n}) {\n  return new Intl.NumberFormat(params.locale, {\n    style: 'currency',\n    currency: params.currencyCode,\n  }).format(Number(params.value));\n}\n","import snakecaseKeys from \"snakecase-keys\";\nimport camelcaseKeys from \"camelcase-keys\";\n\n/**\n/**\n * スネークケースからキャメルケースへの変換\n * @param S スネークケースの文字列\n * @returns キャメルケースの文字列\n */\nexport type SnakeToCamelCase<S extends string> =\n\tS extends `${infer T}_${infer U}`\n\t\t? `${Lowercase<T>}${Capitalize<SnakeToCamelCase<U>>}`\n\t\t: S;\nexport type SnakeToCamelCaseNested<T> = T extends object\n\t? {\n\t\t\t[K in keyof T as SnakeToCamelCase<K & string>]: SnakeToCamelCaseNested<\n\t\t\t\tT[K]\n\t\t\t>;\n\t\t}\n\t: T;\n\n/**\n * キャメルケースからスネークケースへの変換\n * @param S キャメルケースの文字列\n * @returns スネークケースの文字列\n */\nexport type CamelToSnakeCase<S extends string> =\n\tS extends `${infer T}${infer U}`\n\t\t? `${T extends Capitalize<T> ? \"_\" : \"\"}${Lowercase<T>}${CamelToSnakeCase<U>}`\n\t\t: S;\n\nexport type CamelCaseToSnakeNested<T> = T extends object\n\t? {\n\t\t\t[K in keyof T as CamelToSnakeCase<K & string>]: CamelCaseToSnakeNested<\n\t\t\t\tT[K]\n\t\t\t>;\n\t\t}\n\t: T;\n\nexport const camelToSnake = <\n\tT extends Record<string, unknown> | readonly Record<string, unknown>[],\n>(\n\tdata: T,\n): CamelCaseToSnakeNested<T> =>\n\tsnakecaseKeys(data, { deep: true }) as unknown as CamelCaseToSnakeNested<T>;\nexport const snakeToCamel = <\n\tT extends Record<string, unknown> | readonly Record<string, unknown>[],\n>(\n\tdata: T,\n): SnakeToCamelCaseNested<T> =>\n\tcamelcaseKeys(data, { deep: true }) as unknown as SnakeToCamelCaseNested<T>;\n","/**\n * 日付操作ユーティリティ\n */\n\n/**\n * 日付をYYYY-MM-DD形式の文字列に変換する\n * @param date 変換する日付\n * @returns YYYY-MM-DD形式の文字列\n */\nexport const formatDateToYYYYMMDD = (date: Date): string => {\n\tconst year = date.getFullYear();\n\tconst month = String(date.getMonth() + 1).padStart(2, \"0\");\n\tconst day = String(date.getDate()).padStart(2, \"0\");\n\treturn `${year}-${month}-${day}`;\n};\n\n/**\n * 日付をYYYY年MM月DD日形式の文字列に変換する\n * @param date 変換する日付\n * @returns YYYY年MM月DD日形式の文字列\n */\nexport const formatDateToJapanese = (date: Date): string => {\n\tconst year = date.getFullYear();\n\tconst month = date.getMonth() + 1;\n\tconst day = date.getDate();\n\treturn `${year}年${month}月${day}日`;\n};\n\n/**\n * 現在の日付から指定した日数前の日付を取得する\n * @param days 日数\n * @returns 指定した日数前の日付\n */\nexport const getDateBefore = (days: number): Date => {\n\tconst date = new Date();\n\tdate.setDate(date.getDate() - days);\n\treturn date;\n};\n\n/**\n * 現在の日付から指定した日数後の日付を取得する\n * @param days 日数\n * @returns 指定した日数後の日付\n */\nexport const getDateAfter = (days: number): Date => {\n\tconst date = new Date();\n\tdate.setDate(date.getDate() + days);\n\treturn date;\n};\n\n/**\n * 2つの日付の間の日数を計算する\n * @param date1 日付1\n * @param date2 日付2\n * @returns 日数\n */\nexport const getDaysBetween = (date1: Date, date2: Date): number => {\n\tconst diffTime = Math.abs(date2.getTime() - date1.getTime());\n\treturn Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n};\n\n/**\n * 日付が週末（土曜または日曜）かどうかを判定する\n * @param date 判定する日付\n * @returns 週末の場合はtrue、それ以外の場合はfalse\n */\nexport const isWeekend = (date: Date): boolean => {\n\tconst day = date.getDay();\n\treturn day === 0 || day === 6; // 0: 日曜日, 6: 土曜日\n};\n","/**\n * 文字列操作ユーティリティ\n */\n\n/**\n * 文字列を指定した長さに切り詰め、必要に応じて末尾に省略記号を追加する\n * @param str 対象の文字列\n * @param maxLength 最大長\n * @param suffix 省略記号（デフォルト: \"...\"）\n * @returns 切り詰められた文字列\n */\nexport const truncate = (\n\tstr: string,\n\tmaxLength: number,\n\tsuffix = \"...\",\n): string => {\n\tif (str.length <= maxLength) return str;\n\treturn str.substring(0, maxLength - suffix.length) + suffix;\n};\n\n/**\n * 文字列が有効なURLかどうかを検証する\n * @param str 検証する文字列\n * @returns 有効なURLの場合はtrue、それ以外の場合はfalse\n */\nexport const isValidUrl = (str: string): boolean => {\n\ttry {\n\t\tconst url = new URL(str);\n\t\t// 有効なプロトコルかどうかを確認\n\t\treturn url.protocol === \"http:\" || url.protocol === \"https:\";\n\t} catch {\n\t\treturn false;\n\t}\n};\n\n/**\n * 文字列が有効なメールアドレスかどうかを検証する\n * @param str 検証する文字列\n * @returns 有効なメールアドレスの場合はtrue、それ以外の場合はfalse\n */\nexport const isValidEmail = (str: string): boolean => {\n\tconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\treturn emailRegex.test(str);\n};\n\n/**\n * 文字列から特殊文字をエスケープする\n * @param str エスケープする文字列\n * @returns エスケープされた文字列\n */\nexport const escapeHtml = (str: string): string => {\n\treturn str\n\t\t.replace(/&/g, \"&amp;\")\n\t\t.replace(/</g, \"&lt;\")\n\t\t.replace(/>/g, \"&gt;\")\n\t\t.replace(/\"/g, \"&quot;\")\n\t\t.replace(/'/g, \"&#039;\");\n};\n\n/**\n * 文字列をスラッグ形式に変換する（小文字、ハイフン区切り）\n * @param str 変換する文字列\n * @returns スラッグ形式の文字列\n */\nexport const slugify = (str: string): string => {\n\treturn str\n\t\t.toLowerCase()\n\t\t.replace(/\\s+/g, \"-\")\n\t\t.replace(/[^\\w-]+/g, \"\")\n\t\t.replace(/--+/g, \"-\")\n\t\t.replace(/^-+/, \"\")\n\t\t.replace(/-+$/, \"\");\n};\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n","import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date, options?.in);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","import { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link startOfISOWeek} function options.\n */\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfISOWeek(date, options) {\n  return startOfWeek(date, { ...options, weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeek;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISOWeekYear} function options.\n */\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nexport function getISOWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getISOWeekYear;\n","import { toDate } from \"../toDate.js\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","import { constructFrom } from \"../constructFrom.js\";\n\nexport function normalizeDates(context, ...dates) {\n  const normalize = constructFrom.bind(\n    null,\n    context || dates.find((date) => typeof date === \"object\"),\n  );\n  return dates.map(normalize);\n}\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfDay} function options.\n */\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInDay } from \"./constants.js\";\nimport { startOfDay } from \"./startOfDay.js\";\n\n/**\n * The {@link differenceInCalendarDays} function options.\n */\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - The options object\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const laterStartOfDay = startOfDay(laterDate_);\n  const earlierStartOfDay = startOfDay(earlierDate_);\n\n  const laterTimestamp =\n    +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);\n  const earlierTimestamp =\n    +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { getISOWeekYear } from \"./getISOWeekYear.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\n\n/**\n * The {@link startOfISOWeekYear} function options.\n */\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfISOWeekYear(date, options) {\n  const year = getISOWeekYear(date, options);\n  const fourthOfJanuary = constructFrom(options?.in || date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeekYear;\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","import { isDate } from \"./isDate.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertible into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  return !((!isDate(date) && typeof date !== \"number\") || isNaN(+toDate(date)));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfYear} function options.\n */\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport function startOfYear(date, options) {\n  const date_ = toDate(date, options?.in);\n  date_.setFullYear(date_.getFullYear(), 0, 1);\n  date_.setHours(0, 0, 0, 0);\n  return date_;\n}\n\n// Fallback for modularized imports:\nexport default startOfYear;\n","const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\n","export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n","const formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n","/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // [TODO] -- I challenge you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // [TODO] -- I challenge you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // [TODO] I challenge you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","import { formatDistance } from \"./en-US/_lib/formatDistance.js\";\nimport { formatLong } from \"./en-US/_lib/formatLong.js\";\nimport { formatRelative } from \"./en-US/_lib/formatRelative.js\";\nimport { localize } from \"./en-US/_lib/localize.js\";\nimport { match } from \"./en-US/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const enUS = {\n  code: \"en-US\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default enUS;\n","import { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\nimport { startOfYear } from \"./startOfYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getDayOfYear} function options.\n */\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nexport function getDayOfYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\nexport default getDayOfYear;\n","import { millisecondsInWeek } from \"./constants.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISOWeek} function options.\n */\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nexport function getISOWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getISOWeek;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(options?.in || date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(options?.in || date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (+_date >= +startOfNextYear) {\n    return year + 1;\n  } else if (+_date >= +startOfThisYear) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { getWeekYear } from \"./getWeekYear.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(options?.in || date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeekYear;\n","import { millisecondsInWeek } from \"./constants.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\nimport { startOfWeekYear } from \"./startOfWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\nexport function getWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeek;\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { addLeadingZeros } from \"../addLeadingZeros.js\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n","import { getDayOfYear } from \"../../getDayOfYear.js\";\nimport { getISOWeek } from \"../../getISOWeek.js\";\nimport { getISOWeekYear } from \"../../getISOWeekYear.js\";\nimport { getWeek } from \"../../getWeek.js\";\nimport { getWeekYear } from \"../../getWeekYear.js\";\n\nimport { addLeadingZeros } from \"../addLeadingZeros.js\";\nimport { lightFormatters } from \"./lightFormatters.js\";\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nexport const formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(+date / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    return addLeadingZeros(+date, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n","const dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"P\":\n      return formatLong.date({ width: \"short\" });\n    case \"PP\":\n      return formatLong.date({ width: \"medium\" });\n    case \"PPP\":\n      return formatLong.date({ width: \"long\" });\n    case \"PPPP\":\n    default:\n      return formatLong.date({ width: \"full\" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"p\":\n      return formatLong.time({ width: \"short\" });\n    case \"pp\":\n      return formatLong.time({ width: \"medium\" });\n    case \"ppp\":\n      return formatLong.time({ width: \"long\" });\n    case \"pppp\":\n    default:\n      return formatLong.time({ width: \"full\" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case \"P\":\n      dateTimeFormat = formatLong.dateTime({ width: \"short\" });\n      break;\n    case \"PP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"medium\" });\n      break;\n    case \"PPP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"long\" });\n      break;\n    case \"PPPP\":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: \"full\" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong))\n    .replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\n};\n\nexport const longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n","const dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = [\"D\", \"DD\", \"YY\", \"YYYY\"];\n\nexport function isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nexport function isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nexport function warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === \"Y\" ? \"years\" : \"days of the month\";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n","import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { formatters } from \"./_lib/format/formatters.js\";\nimport { longFormatters } from \"./_lib/format/longFormatters.js\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.js\";\nimport { isValid } from \"./isValid.js\";\nimport { toDate } from \"./toDate.js\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { formatters, longFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\nexport { format as formatDate };\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date, options?.in);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return { isToken: false, value: \"'\" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join(\"\");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default format;\n","const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"1秒未満\",\n    other: \"{{count}}秒未満\",\n    oneWithSuffix: \"約1秒\",\n    otherWithSuffix: \"約{{count}}秒\",\n  },\n\n  xSeconds: {\n    one: \"1秒\",\n    other: \"{{count}}秒\",\n  },\n\n  halfAMinute: \"30秒\",\n\n  lessThanXMinutes: {\n    one: \"1分未満\",\n    other: \"{{count}}分未満\",\n    oneWithSuffix: \"約1分\",\n    otherWithSuffix: \"約{{count}}分\",\n  },\n\n  xMinutes: {\n    one: \"1分\",\n    other: \"{{count}}分\",\n  },\n\n  aboutXHours: {\n    one: \"約1時間\",\n    other: \"約{{count}}時間\",\n  },\n\n  xHours: {\n    one: \"1時間\",\n    other: \"{{count}}時間\",\n  },\n\n  xDays: {\n    one: \"1日\",\n    other: \"{{count}}日\",\n  },\n\n  aboutXWeeks: {\n    one: \"約1週間\",\n    other: \"約{{count}}週間\",\n  },\n\n  xWeeks: {\n    one: \"1週間\",\n    other: \"{{count}}週間\",\n  },\n\n  aboutXMonths: {\n    one: \"約1か月\",\n    other: \"約{{count}}か月\",\n  },\n\n  xMonths: {\n    one: \"1か月\",\n    other: \"{{count}}か月\",\n  },\n\n  aboutXYears: {\n    one: \"約1年\",\n    other: \"約{{count}}年\",\n  },\n\n  xYears: {\n    one: \"1年\",\n    other: \"{{count}}年\",\n  },\n\n  overXYears: {\n    one: \"1年以上\",\n    other: \"{{count}}年以上\",\n  },\n\n  almostXYears: {\n    one: \"1年近く\",\n    other: \"{{count}}年近く\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  options = options || {};\n\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    if (options.addSuffix && tokenValue.oneWithSuffix) {\n      result = tokenValue.oneWithSuffix;\n    } else {\n      result = tokenValue.one;\n    }\n  } else {\n    if (options.addSuffix && tokenValue.otherWithSuffix) {\n      result = tokenValue.otherWithSuffix.replace(\"{{count}}\", String(count));\n    } else {\n      result = tokenValue.other.replace(\"{{count}}\", String(count));\n    }\n  }\n\n  if (options.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return result + \"後\";\n    } else {\n      return result + \"前\";\n    }\n  }\n\n  return result;\n};\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"y年M月d日EEEE\",\n  long: \"y年M月d日\",\n  medium: \"y/MM/dd\",\n  short: \"y/MM/dd\",\n};\n\nconst timeFormats = {\n  full: \"H時mm分ss秒 zzzz\",\n  long: \"H:mm:ss z\",\n  medium: \"H:mm:ss\",\n  short: \"H:mm\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} {{time}}\",\n  long: \"{{date}} {{time}}\",\n  medium: \"{{date}} {{time}}\",\n  short: \"{{date}} {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n","const formatRelativeLocale = {\n  lastWeek: \"先週のeeeeのp\",\n  yesterday: \"昨日のp\",\n  today: \"今日のp\",\n  tomorrow: \"明日のp\",\n  nextWeek: \"翌週のeeeeのp\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) => {\n  return formatRelativeLocale[token];\n};\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"BC\", \"AC\"],\n  abbreviated: [\"紀元前\", \"西暦\"],\n  wide: [\"紀元前\", \"西暦\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"第1四半期\", \"第2四半期\", \"第3四半期\", \"第4四半期\"],\n};\n\nconst monthValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\n\n  abbreviated: [\n    \"1月\",\n    \"2月\",\n    \"3月\",\n    \"4月\",\n    \"5月\",\n    \"6月\",\n    \"7月\",\n    \"8月\",\n    \"9月\",\n    \"10月\",\n    \"11月\",\n    \"12月\",\n  ],\n\n  wide: [\n    \"1月\",\n    \"2月\",\n    \"3月\",\n    \"4月\",\n    \"5月\",\n    \"6月\",\n    \"7月\",\n    \"8月\",\n    \"9月\",\n    \"10月\",\n    \"11月\",\n    \"12月\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"日\", \"月\", \"火\", \"水\", \"木\", \"金\", \"土\"],\n  short: [\"日\", \"月\", \"火\", \"水\", \"木\", \"金\", \"土\"],\n  abbreviated: [\"日\", \"月\", \"火\", \"水\", \"木\", \"金\", \"土\"],\n  wide: [\"日曜日\", \"月曜日\", \"火曜日\", \"水曜日\", \"木曜日\", \"金曜日\", \"土曜日\"],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"午前\",\n    pm: \"午後\",\n    midnight: \"深夜\",\n    noon: \"正午\",\n    morning: \"朝\",\n    afternoon: \"午後\",\n    evening: \"夜\",\n    night: \"深夜\",\n  },\n  abbreviated: {\n    am: \"午前\",\n    pm: \"午後\",\n    midnight: \"深夜\",\n    noon: \"正午\",\n    morning: \"朝\",\n    afternoon: \"午後\",\n    evening: \"夜\",\n    night: \"深夜\",\n  },\n  wide: {\n    am: \"午前\",\n    pm: \"午後\",\n    midnight: \"深夜\",\n    noon: \"正午\",\n    morning: \"朝\",\n    afternoon: \"午後\",\n    evening: \"夜\",\n    night: \"深夜\",\n  },\n};\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"午前\",\n    pm: \"午後\",\n    midnight: \"深夜\",\n    noon: \"正午\",\n    morning: \"朝\",\n    afternoon: \"午後\",\n    evening: \"夜\",\n    night: \"深夜\",\n  },\n  abbreviated: {\n    am: \"午前\",\n    pm: \"午後\",\n    midnight: \"深夜\",\n    noon: \"正午\",\n    morning: \"朝\",\n    afternoon: \"午後\",\n    evening: \"夜\",\n    night: \"深夜\",\n  },\n  wide: {\n    am: \"午前\",\n    pm: \"午後\",\n    midnight: \"深夜\",\n    noon: \"正午\",\n    morning: \"朝\",\n    afternoon: \"午後\",\n    evening: \"夜\",\n    night: \"深夜\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, options) => {\n  const number = Number(dirtyNumber);\n  const unit = String(options?.unit);\n\n  switch (unit) {\n    case \"year\":\n      return `${number}年`;\n    case \"quarter\":\n      return `第${number}四半期`;\n    case \"month\":\n      return `${number}月`;\n    case \"week\":\n      return `第${number}週`;\n    case \"date\":\n      return `${number}日`;\n    case \"hour\":\n      return `${number}時`;\n    case \"minute\":\n      return `${number}分`;\n    case \"second\":\n      return `${number}秒`;\n    default:\n      return `${number}`;\n  }\n};\n\nexport const localize = {\n  ordinalNumber: ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => Number(quarter) - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","import { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\nimport { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\n\nconst matchOrdinalNumberPattern = /^第?\\d+(年|四半期|月|週|日|時|分|秒)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(B\\.?C\\.?|A\\.?D\\.?)/i,\n  abbreviated: /^(紀元[前後]|西暦)/i,\n  wide: /^(紀元[前後]|西暦)/i,\n};\nconst parseEraPatterns = {\n  narrow: [/^B/i, /^A/i],\n  any: [/^(紀元前)/i, /^(西暦|紀元後)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^Q[1234]/i,\n  wide: /^第[1234一二三四１２３４]四半期/i,\n};\nconst parseQuarterPatterns = {\n  any: [/(1|一|１)/i, /(2|二|２)/i, /(3|三|３)/i, /(4|四|４)/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^([123456789]|1[012])/,\n  abbreviated: /^([123456789]|1[012])月/i,\n  wide: /^([123456789]|1[012])月/i,\n};\nconst parseMonthPatterns = {\n  any: [\n    /^1\\D/,\n    /^2/,\n    /^3/,\n    /^4/,\n    /^5/,\n    /^6/,\n    /^7/,\n    /^8/,\n    /^9/,\n    /^10/,\n    /^11/,\n    /^12/,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[日月火水木金土]/,\n  short: /^[日月火水木金土]/,\n  abbreviated: /^[日月火水木金土]/,\n  wide: /^[日月火水木金土]曜日/,\n};\nconst parseDayPatterns = {\n  any: [/^日/, /^月/, /^火/, /^水/, /^木/, /^金/, /^土/],\n};\n\nconst matchDayPeriodPatterns = {\n  any: /^(AM|PM|午前|午後|正午|深夜|真夜中|夜|朝)/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^(A|午前)/i,\n    pm: /^(P|午後)/i,\n    midnight: /^深夜|真夜中/i,\n    noon: /^正午/i,\n    morning: /^朝/i,\n    afternoon: /^午後/i,\n    evening: /^夜/i,\n    night: /^深夜/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    },\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","import { formatDistance } from \"./ja/_lib/formatDistance.js\";\nimport { formatLong } from \"./ja/_lib/formatLong.js\";\nimport { formatRelative } from \"./ja/_lib/formatRelative.js\";\nimport { localize } from \"./ja/_lib/localize.js\";\nimport { match } from \"./ja/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary Japanese locale.\n * @language Japanese\n * @iso-639-2 jpn\n * @author Thomas Eilmsteiner [@DeMuu](https://github.com/DeMuu)\n * @author Yamagishi Kazutoshi [@ykzts](https://github.com/ykzts)\n * @author Luca Ban [@mesqueeb](https://github.com/mesqueeb)\n * @author Terrence Lam [@skyuplam](https://github.com/skyuplam)\n * @author Taiki IKeda [@so99ynoodles](https://github.com/so99ynoodles)\n */\nexport const ja = {\n  code: \"ja\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default ja;\n","/**\n * フォーマットユーティリティ\n * 様々なデータ型を人間が読みやすい形式に変換する関数を提供します。\n */\n\nimport { format } from \"date-fns\";\nimport { ja } from \"date-fns/locale\";\n\n/**\n * ファイルサイズを人間が読みやすい形式にフォーマットする\n * @param bytes ファイルサイズ（バイト）\n * @returns フォーマットされたファイルサイズ\n */\nexport function formatFileSize(bytes: number): string {\n\tif (bytes === 0) return \"0 B\";\n\n\tconst k = 1024;\n\tconst sizes = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"];\n\tconst i = Math.floor(Math.log(bytes) / Math.log(k));\n\n\treturn `${(bytes / k ** i).toFixed(1)} ${sizes[i]}`;\n}\n\n/**\n * 日付を日本語フォーマットに変換する\n * @param date - ISO形式の日付文字列\n * @returns フォーマットされた日付文字列\n */\nexport function formatDate(date: string): string {\n\treturn format(new Date(date), \"yyyy年MM月dd日\", { locale: ja });\n}\n\n/**\n * 日付と時刻を日本語フォーマットに変換する\n * @param date - ISO形式の日付文字列\n * @returns フォーマットされた日付と時刻の文字列\n */\nexport function formatDateTime(date: string): string {\n\treturn format(new Date(date), \"yyyy年MM月dd日 HH:mm:ss\", { locale: ja });\n}\n\n/**\n * 数値を日本語フォーマットに変換する\n * @param num - フォーマットする数値\n * @returns フォーマットされた数値文字列\n */\nexport function formatNumber(num: number): string {\n\treturn new Intl.NumberFormat(\"ja-JP\").format(num);\n}\n\n/**\n * 時間を日本語フォーマットに変換する\n * @param seconds - 秒数\n * @returns フォーマットされた時間文字列\n */\nexport function formatTime(seconds: number): string {\n\tconst hours = Math.floor(seconds / 3600);\n\tconst minutes = Math.floor((seconds % 3600) / 60);\n\tconst remainingSeconds = seconds % 60;\n\n\treturn `${hours}時間${minutes}分${remainingSeconds}秒`;\n}\n\n/**\n * 時間をタイマー表示形式でフォーマットする\n * @param seconds - 秒数\n * @returns フォーマットされた時間文字列 (MM:SS または HH:MM:SS)\n */\nexport function formatTimerDisplay(seconds: number): string {\n\tconst hours = Math.floor(seconds / 3600);\n\tconst minutes = Math.floor((seconds % 3600) / 60);\n\tconst remainingSeconds = Math.floor(seconds % 60);\n\n\tif (hours > 0) {\n\t\treturn `${hours.toString().padStart(2, \"0\")}:${minutes.toString().padStart(2, \"0\")}:${remainingSeconds.toString().padStart(2, \"0\")}`;\n\t}\n\treturn `${minutes.toString().padStart(2, \"0\")}:${remainingSeconds.toString().padStart(2, \"0\")}`;\n}\n","/**\n * エラーハンドリングユーティリティ\n * 様々なエラーをアプリケーションのエラー形式に変換する関数を提供します。\n */\n\nimport type { PostgrestError } from '@supabase/supabase-js';\n\n/**\n * アプリケーションのエラーコード\n */\nexport type ErrorCode =\n  | 'UNAUTHORIZED'\n  | 'FORBIDDEN'\n  | 'NOT_FOUND'\n  | 'VALIDATION_ERROR'\n  | 'DATABASE_ERROR'\n  | 'INTERNAL_ERROR';\n\n/**\n * アプリケーションのエラー型\n */\nexport interface AppError {\n  code: ErrorCode;\n  message: string;\n  status: number;\n  cause?: unknown;\n}\n\n/**\n * エラーコードとステータスコードのマッピング\n */\nconst ERROR_STATUS_MAP: Record<ErrorCode, number> = {\n  UNAUTHORIZED: 401,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  VALIDATION_ERROR: 400,\n  DATABASE_ERROR: 500,\n  INTERNAL_ERROR: 500,\n};\n\n/**\n * Supabaseのエラーをアプリケーションのエラーに変換する\n * @param error - Supabaseから返されたエラー\n * @returns アプリケーションのエラー形式に変換されたエラー\n */\nexport function handleSupabaseError(error: PostgrestError): AppError {\n  // エラーコードに基づいてエラー型を決定\n  let code: ErrorCode = 'DATABASE_ERROR';\n  if (error.code === 'PGRST116') {\n    code = 'NOT_FOUND';\n  } else if (error.code === '42501') {\n    code = 'FORBIDDEN';\n  } else if (error.code === '23505') {\n    code = 'VALIDATION_ERROR';\n  }\n\n  return {\n    code,\n    message: error.message,\n    status: ERROR_STATUS_MAP[code],\n    cause: error,\n  };\n}\n\n/**\n * 未知のエラーをアプリケーションのエラーに変換する\n * @param error - 未知のエラー\n * @returns アプリケーションのエラー形式に変換されたエラー\n */\nexport function handleUnknownError(error: unknown): AppError {\n  if (error instanceof Error) {\n    return {\n      code: 'INTERNAL_ERROR',\n      message: error.message,\n      status: 500,\n      cause: error,\n    };\n  }\n\n  return {\n    code: 'INTERNAL_ERROR',\n    message: '予期せぬエラーが発生しました',\n    status: 500,\n    cause: error,\n  };\n}\n\n/**\n * エラーをアプリケーションのエラーに変換する\n * @param error - 変換するエラー\n * @returns アプリケーションのエラー形式に変換されたエラー\n */\nexport function handleError(error: unknown): AppError {\n  if ((error as PostgrestError).code !== undefined) {\n    return handleSupabaseError(error as PostgrestError);\n  }\n\n  return handleUnknownError(error);\n}\n"]}