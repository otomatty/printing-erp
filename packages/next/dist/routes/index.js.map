{"version":3,"sources":["../../../../node_modules/server-only/index.js","../../src/utils/index.ts","../../src/routes/index.ts"],"names":["verifyCaptchaToken","getSupabaseServerClient","requireUser","redirect"],"mappings":";;;;;;;;AAAA,MAAM,IAAI,KAAA;AAAA,EACR;AAEF,CAAA;;;ACDO,IAAM,eACX,GAAA,CAAyB,MACzB,KAAA,CAAC,IAA8B,KAAA;AAC7B,EAAI,IAAA;AACF,IAAO,OAAA,MAAA,CAAO,MAAM,IAAI,CAAA;AAAA,WACjB,GAAK,EAAA;AACZ,IAAA,OAAA,CAAQ,MAAM,GAAG,CAAA;AAGjB,IAAA,MAAM,IAAI,KAAA,CAAM,CAAiB,cAAA,EAAA,GAAa,CAAE,CAAA,CAAA;AAAA;AAEpD,CAAA;;;AC6CW,IAAA,mBAAA,GAAsB,CAKjC,OAAA,EAQA,MACG,KAAA;AAOH,EAAO,OAAA,eAAe,YACpB,CAAA,OAAA,EACA,WAGA,EAAA;AAGA,IAAA,IAAI,IAAkB,GAAA,MAAA;AAGtB,IAAM,MAAA,mBAAA,GAAsB,QAAQ,OAAW,IAAA,KAAA;AAG/C,IAAA,IAAI,mBAAqB,EAAA;AACvB,MAAM,MAAA,KAAA,GAAQ,mBAAmB,OAAO,CAAA;AAGxC,MAAA,IAAI,KAAO,EAAA;AACT,QAAA,MAAMA,0BAAmB,KAAK,CAAA;AAAA,OACzB,MAAA;AACL,QAAA,OAAO,IAAI,QAAS,CAAA,+DAAA,EAAoB,EAAE,MAAA,EAAQ,KAAK,CAAA;AAAA;AACzD;AAKF,IAAA,MAAM,SAASC,oCAAwB,EAAA;AAGvC,IAAM,MAAA,gBAAA,GAAmB,QAAQ,IAAQ,IAAA,IAAA;AAGzC,IAAA,IAAI,gBAAkB,EAAA;AAEpB,MAAM,MAAA,IAAA,GAAO,MAAMC,uBAAA,CAAY,MAAM,CAAA;AAGrC,MAAA,IAAI,KAAK,KAAO,EAAA;AACd,QAAO,OAAAC,mBAAA,CAAS,KAAK,UAAU,CAAA;AAAA;AAGjC,MAAA,IAAA,GAAO,IAAK,CAAA,IAAA;AAAA;AAGd,IAAA,IAAI,IAEY,GAAA,MAAA;AAGhB,IAAA,IAAI,QAAQ,MAAQ,EAAA;AAGlB,MAAA,MAAM,IAAO,GAAA,MAAM,OAAQ,CAAA,KAAA,GAAQ,IAAK,EAAA;AAGxC,MAAO,IAAA,GAAA,eAAA,CAAgB,OAAO,MAAM,CAAA;AAAA,QAClC;AAAA,OACF;AAAA;AAMF,IAAA,OAAO,OAAQ,CAAA;AAAA,MACb,OAAA;AAAA,MACA,IAAA;AAAA,MACA,IAAA;AAAA,MACA,MAAA,EAAQ,MAAM,WAAY,CAAA;AAAA,KAC3B,CAAA;AAAA,GACH;AACF;AAOA,SAAS,mBAAmB,OAAsB,EAAA;AAChD,EAAO,OAAA,OAAA,CAAQ,OAAQ,CAAA,GAAA,CAAI,iBAAiB,CAAA;AAC9C","file":"index.js","sourcesContent":["throw new Error(\n  \"This module cannot be imported from a Client Component module. \" +\n    \"It should only be used from a Server Component.\"\n);\n","import type { z } from 'zod';\n\nexport const zodParseFactory =\n  <T extends z.ZodTypeAny>(schema: T) =>\n  (data: unknown): z.infer<T> => {\n    try {\n      return schema.parse(data) as unknown;\n    } catch (err) {\n      console.error(err);\n\n      // handle error\n      throw new Error(`Invalid data: ${err as string}`);\n    }\n  };\n","import 'server-only';\n\nimport { redirect } from 'next/navigation';\nimport type { NextRequest, NextResponse } from 'next/server';\n\nimport type { User, SupabaseClient } from '@supabase/supabase-js';\nimport type { Database } from '@kit/supabase/database';\n\nimport type { z } from 'zod';\n\nimport { verifyCaptchaToken } from '@kit/auth/captcha/server';\nimport { requireUser } from '@kit/supabase/require-user';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nimport { zodParseFactory } from '../utils';\n\ninterface Config<Schema> {\n  auth?: boolean;\n  captcha?: boolean;\n  schema?: Schema;\n}\n\ninterface HandlerParams<\n  Schema extends z.ZodType | undefined,\n  RequireAuth extends boolean | undefined,\n> {\n  request: NextRequest;\n  user: RequireAuth extends false ? undefined : User;\n  body: Schema extends z.ZodType ? z.infer<Schema> : undefined;\n  params: Record<string, string>;\n}\n\n/**\n * 拡張されたルートハンドラ関数。\n *\n * この関数はリクエストとパラメータオブジェクトを引数として受け取り、ルートハンドラ関数を返します。\n * 返されたルートハンドラ関数は、HTTPリクエストを処理し、提供されたパラメータに基づいて\n * 追加の機能拡張（認証、CAPTCHA検証、スキーマ検証など）を適用します。\n *\n * 主な機能:\n * 1. 認証チェック: ユーザーが認証されているか確認し、未認証の場合はリダイレクト\n * 2. CAPTCHA検証: ヘッダーからCAPTCHAトークンを取得して検証\n * 3. スキーマ検証: Zodを使用したリクエストボディの検証\n * 4. 型安全性: TypeScriptの型推論を活用した型安全なハンドラ\n *\n * 使用例:\n * export const POST = enhanceRouteHandler(\n *   ({ request, body, user }) => {\n *     return new Response(`こんにちは、${body.name}さん!`);\n *   },\n *   {\n *     schema: z.object({\n *       name: z.string(),\n *     }),\n *   },\n * );\n *\n */\nexport const enhanceRouteHandler = <\n  Body,\n  Params extends Config<z.ZodType<Body, z.ZodTypeDef>>,\n>(\n  // ルートハンドラ関数\n  handler:\n    | ((\n        params: HandlerParams<Params['schema'], Params['auth']>\n      ) => NextResponse | Response)\n    | ((\n        params: HandlerParams<Params['schema'], Params['auth']>\n      ) => Promise<NextResponse | Response>),\n  // パラメータオブジェクト\n  params?: Params\n) => {\n  /**\n   * ルートハンドラ関数。\n   *\n   * この関数はリクエストオブジェクトを引数として受け取り、レスポンスオブジェクトを返します。\n   * Next.jsのAPIルートで使用されるメインの処理関数です。\n   */\n  return async function routeHandler(\n    request: NextRequest,\n    routeParams: {\n      params: Promise<Record<string, string>>;\n    }\n  ) {\n    type UserParam = Params['auth'] extends false ? undefined : User;\n\n    let user: UserParam = undefined as UserParam;\n\n    // CAPTCHAトークンを検証すべきかどうかを設定から取得（デフォルトはfalse）\n    const shouldVerifyCaptcha = params?.captcha ?? false;\n\n    // CAPTCHAトークンの検証が必要かつ設定されている場合、トークンを検証\n    if (shouldVerifyCaptcha) {\n      const token = captchaTokenGetter(request);\n\n      // CAPTCHAトークンが提供されていない場合、400エラーレスポンスを返す\n      if (token) {\n        await verifyCaptchaToken(token);\n      } else {\n        return new Response('CAPTCHAトークンが必要です', { status: 400 });\n      }\n    }\n\n    // Supabaseクライアントを初期化\n    // @ts-ignore\n    const client = getSupabaseServerClient();\n\n    // 認証が必要かどうかを設定から取得（デフォルトはtrue）\n    const shouldVerifyAuth = params?.auth ?? true;\n\n    // 認証が必要な場合、ユーザーが認証されているか確認\n    if (shouldVerifyAuth) {\n      // 認証済みユーザーを取得\n      const auth = await requireUser(client);\n\n      // ユーザーが認証されていない場合、指定されたURLにリダイレクト\n      if (auth.error) {\n        return redirect(auth.redirectTo);\n      }\n\n      user = auth.data as UserParam;\n    }\n\n    let body: Params['schema'] extends z.ZodType\n      ? z.infer<Params['schema']>\n      : undefined = undefined;\n\n    // スキーマが指定されている場合、リクエストボディを検証\n    if (params?.schema) {\n      // リクエストをクローンしてボディを読み取り\n      // ハンドラに安全に渡せるようにする\n      const json = await request.clone().json();\n\n      // Zodスキーマを使用してリクエストボディを検証\n      body = zodParseFactory(params.schema)(\n        json\n      ) as Params['schema'] extends z.ZodType\n        ? z.infer<Params['schema']>\n        : never;\n    }\n\n    // すべての検証が成功したら、ハンドラ関数を実行して結果を返す\n    return handler({\n      request,\n      body,\n      user,\n      params: await routeParams.params,\n    });\n  };\n};\n\n/**\n * リクエストヘッダーからCAPTCHAトークンを取得します。\n * @param request NextRequestオブジェクト\n * @returns CAPTCHAトークン文字列またはnull\n */\nfunction captchaTokenGetter(request: NextRequest) {\n  return request.headers.get('x-captcha-token');\n}\n"]}