{"version":3,"sources":["../../../src/actions/auth/auth.ts"],"names":[],"mappings":";;;AAoBA,eAAsB,YAAiC,GAAA;AACrD,EAAI,IAAA;AACF,IAAM,MAAA,QAAA,GAAW,MAAM,uBAAwB,EAAA;AAC/C,IAAA,MAAM,EAAE,IAAM,EAAA,KAAA,KAAU,MAAM,QAAA,CAAS,IAAI,gBAAgB,CAAA;AAE3D,IAAA,IAAI,KAAO,EAAA;AACT,MAAQ,OAAA,CAAA,KAAA,CAAM,gCAAgC,KAAK,CAAA;AACnD,MAAO,OAAA,KAAA;AAAA;AAGT,IAAA,OAAO,CAAC,CAAC,IAAA;AAAA,WACF,KAAO,EAAA;AACd,IAAQ,OAAA,CAAA,KAAA,CAAM,qCAAqC,KAAK,CAAA;AACxD,IAAO,OAAA,KAAA;AAAA;AAEX;AAMA,eAAsB,YAAe,GAAA;AACnC,EAAI,IAAA;AACF,IAAM,MAAA,QAAA,GAAW,MAAM,uBAAwB,EAAA;AAG/C,IAAM,MAAA,QAAA,GAAW,IAAI,QAAS,EAAA;AAC9B,IAAS,QAAA,CAAA,OAAA,CAAQ,GAAI,CAAA,eAAA,EAAiB,UAAU,CAAA;AAGhD,IAAM,MAAA;AAAA,MACJ,IAAA,EAAM,EAAE,IAAK;AAAA,KACX,GAAA,MAAM,QAAS,CAAA,IAAA,CAAK,OAAQ,EAAA;AAEhC,IAAA,IAAI,CAAC,IAAM,EAAA;AACT,MAAO,OAAA;AAAA,QACL,eAAiB,EAAA,KAAA;AAAA,QACjB,OAAS,EAAA;AAAA,OACX;AAAA;AAIF,IAAA,MAAM,EAAE,IAAM,EAAA,WAAA,EAAa,OAAO,gBAAiB,EAAA,GAAI,MAAM,QAC1D,CAAA,IAAA,CAAK,eAAe,CACpB,CAAA,MAAA,CAAO,GAAG,CACV,CAAA,EAAA,CAAG,gBAAgB,IAAK,CAAA,EAAE,EAC1B,MAAO,EAAA;AAEV,IAAI,IAAA,gBAAA,IAAoB,CAAC,WAAa,EAAA;AACpC,MAAO,OAAA;AAAA,QACL,eAAiB,EAAA,IAAA;AAAA,QACjB,OAAS,EAAA;AAAA,OACX;AAAA;AAIF,IAAM,MAAA,EAAE,IAAM,EAAA,OAAA,EAAY,GAAA,MAAM,SAC7B,MAAO,CAAA,QAAQ,CACf,CAAA,GAAA,CAAI,gBAAgB,CAAA;AAGvB,IAAA,MAAM,eAAmC,GAAA;AAAA,MACvC,IAAI,WAAY,CAAA,EAAA;AAAA,MAChB,KAAA,EAAO,YAAY,KAAS,IAAA,IAAA;AAAA,MAC5B,QAAA,EAAU,YAAY,SAAa,IAAA,IAAA;AAAA,MACnC,SAAA,EAAW,YAAY,UAAc,IAAA,IAAA;AAAA,MACrC,WAAW,WAAY,CAAA,UAAA;AAAA,MACvB,WAAW,WAAY,CAAA,UAAA;AAAA,MACvB,OAAA,EAAS,CAAC,CAAC;AAAA,KACb;AAEA,IAAO,OAAA;AAAA,MACL,eAAiB,EAAA,IAAA;AAAA,MACjB,OAAS,EAAA;AAAA,KACX;AAAA,WACO,KAAO,EAAA;AACd,IAAQ,OAAA,CAAA,KAAA,CAAM,yFAAmB,KAAK,CAAA;AACtC,IAAO,OAAA;AAAA,MACL,eAAiB,EAAA,KAAA;AAAA,MACjB,OAAS,EAAA;AAAA,KACX;AAAA;AAEJ","file":"index.mjs","sourcesContent":["'use server';\n\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\n/**\n * ProfileWithRole型の定義\n */\ntype ProfileWithRole = {\n  id: string;\n  email: string | null;\n  fullName: string | null;\n  avatarUrl: string | null;\n  createdAt: string;\n  updatedAt: string;\n  isAdmin: boolean;\n};\n\n/**\n * 現在のユーザーが管理者かどうかを確認します\n */\nexport async function checkIsAdmin(): Promise<boolean> {\n  try {\n    const supabase = await getSupabaseServerClient();\n    const { data, error } = await supabase.rpc('check_is_admin');\n\n    if (error) {\n      console.error('Error checking admin status:', error);\n      return false;\n    }\n\n    return !!data;\n  } catch (error) {\n    console.error('Unexpected error in checkIsAdmin:', error);\n    return false;\n  }\n}\n\n/**\n * 認証状態とプロフィール情報を取得します\n * @returns {Promise<{ isAuthenticated: boolean; profile: ProfileWithRole | null }>}\n */\nexport async function getAuthState() {\n  try {\n    const supabase = await getSupabaseServerClient();\n\n    // レスポンスのキャッシュを無効化\n    const response = new Response();\n    response.headers.set('Cache-Control', 'no-store');\n\n    // ユーザー情報を取得\n    const {\n      data: { user },\n    } = await supabase.auth.getUser();\n\n    if (!user) {\n      return {\n        isAuthenticated: false,\n        profile: null,\n      };\n    }\n\n    // プロフィール情報のみを取得\n    const { data: profileOnly, error: profileOnlyError } = await supabase\n      .from('user_accounts')\n      .select('*')\n      .eq('auth_user_id', user.id)\n      .single();\n\n    if (profileOnlyError || !profileOnly) {\n      return {\n        isAuthenticated: true,\n        profile: null,\n      };\n    }\n\n    // 管理者権限を確認\n    const { data: isAdmin } = await supabase\n      .schema('system')\n      .rpc('check_is_admin');\n\n    // ProfileWithRole型に変換\n    const profileWithRole: ProfileWithRole = {\n      id: profileOnly.id,\n      email: profileOnly.email ?? null,\n      fullName: profileOnly.full_name ?? null,\n      avatarUrl: profileOnly.avatar_url ?? null,\n      createdAt: profileOnly.created_at,\n      updatedAt: profileOnly.updated_at,\n      isAdmin: !!isAdmin,\n    };\n\n    return {\n      isAuthenticated: true,\n      profile: profileWithRole,\n    };\n  } catch (error) {\n    console.error('認証状態の取得に失敗しました:', error);\n    return {\n      isAuthenticated: false,\n      profile: null,\n    };\n  }\n}\n"]}