{"version":3,"sources":["../src/clients/server-client.ts"],"names":["getSupabaseClientKeys","createServerClient","cookies"],"mappings":";;;;;;;AAmDO,SAAS,uBAAoD,GAAA;AAClE,EAAA,MAAM,OAAOA,sCAAsB,EAAA;AAEnC,EAAA,OAAOC,sBAAkC,CAAA,IAAA,CAAK,GAAK,EAAA,IAAA,CAAK,OAAS,EAAA;AAAA,IAC/D,OAAS,EAAA;AAAA,MACP,MAAM,MAAS,GAAA;AACb,QAAM,MAAA,WAAA,GAAc,MAAMC,eAAQ,EAAA;AAElC,QAAA,OAAO,YAAY,MAAO,EAAA;AAAA,OAC5B;AAAA,MACA,MAAM,OAAO,YAAc,EAAA;AACzB,QAAM,MAAA,WAAA,GAAc,MAAMA,eAAQ,EAAA;AAElC,QAAI,IAAA;AACF,UAAA,KAAA,MAAW,EAAE,IAAA,EAAM,KAAO,EAAA,OAAA,MAAa,YAAc,EAAA;AACnD,YAAY,WAAA,CAAA,GAAA,CAAI,IAAM,EAAA,KAAA,EAAO,OAAO,CAAA;AAAA;AACtC,SACM,CAAA,MAAA;AAAA;AAIR;AACF;AACF,GACD,CAAA;AACH","file":"chunk-BQDH6EUF.js","sourcesContent":["/**\n * server-client.ts\n *\n * このファイルはサーバー環境（Next.jsのサーバーコンポーネントやAPIルート）で\n * Supabaseクライアントを初期化するための関数を提供します。\n *\n * 主な機能:\n * - サーバー環境に最適化されたSupabaseクライアントの作成\n * - Next.jsのcookies APIを使用したセッション管理\n * - 型安全なクライアントインスタンスの提供\n *\n * 処理の流れ:\n * 1. 'server-only'パッケージをインポートして、このコードがクライアントサイドに\n *    バンドルされることを防止\n * 2. getSupabaseClientKeys()関数を呼び出して環境変数からSupabase URLと匿名キーを取得\n * 3. @supabase/ssrパッケージの createServerClient 関数を使用してクライアントを初期化\n * 4. Next.jsのcookies APIを使用してクッキーの取得と設定を行うカスタムハンドラを提供\n *    - getAll(): cookieStoreからすべてのクッキーを取得\n *    - setAll(): 新しいクッキーをcookieStoreに設定\n * 5. ジェネリック型パラメータを使用して、型安全なクライアントを返す\n *\n * 特記事項:\n * - try-catchブロックでクッキー設定のエラーをキャッチしています。これは、\n *   サーバーコンポーネントからsetAllメソッドが呼び出された場合に発生する可能性があります。\n *   このエラーは、ミドルウェアがユーザーセッションを更新している場合は無視できます。\n *\n * 使用例:\n * ```\n * // サーバーコンポーネントまたはAPIルート内で\n * const supabase = getSupabaseServerClient();\n * const { data } = await supabase.from('table').select('*');\n * ```\n *\n * 注意点:\n * - このクライアントはサーバー環境でのみ使用することを想定しています\n * - サーバーコンポーネントやAPIルート内でのみ使用可能です\n * - 環境変数 NEXT_PUBLIC_SUPABASE_URL と NEXT_PUBLIC_SUPABASE_ANON_KEY が\n *   設定されている必要があります\n */\nimport 'server-only';\n\nimport { cookies } from 'next/headers';\nimport { createServerClient } from '@supabase/ssr';\n\nimport type { Database } from '../database.types';\nimport { getSupabaseClientKeys } from '../get-supabase-client-keys';\n\n/**\n * @name getSupabaseServerClient\n * @description サーバーで使用するためのSupabaseクライアントを作成します。\n */\nexport function getSupabaseServerClient<GenericSchema = Database>() {\n  const keys = getSupabaseClientKeys();\n\n  return createServerClient<GenericSchema>(keys.url, keys.anonKey, {\n    cookies: {\n      async getAll() {\n        const cookieStore = await cookies();\n\n        return cookieStore.getAll();\n      },\n      async setAll(cookiesToSet) {\n        const cookieStore = await cookies();\n\n        try {\n          for (const { name, value, options } of cookiesToSet) {\n            cookieStore.set(name, value, options);\n          }\n        } catch {\n          // サーバーコンポーネントから`setAll`メソッドが呼び出されました。\n          // ミドルウェアがユーザーセッションを更新している場合、\n          // これは無視できます。\n        }\n      },\n    },\n  });\n}\n"]}