{"version":3,"sources":["../src/handle-auth-callback.ts"],"names":["cookies"],"mappings":"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","file":"index.mjs","sourcesContent":["import 'server-only';\n\nimport { cookies } from 'next/headers';\nimport type { NextRequest } from 'next/server';\nimport { createServerClient, type CookieOptions } from '@supabase/ssr';\n\nimport { getSupabaseClientKeys } from './get-supabase-client-keys'; // パッケージ内部から参照\nimport {\n  createAuthCallbackService,\n  type AuthClientInterface,\n} from './auth-callback.service'; // 同じディレクトリ内か確認\n\n/**\n * 認証コールバック処理を表す型\n */\nexport type HandleCallbackResult =\n  | { type: 'success'; nextPath: string }\n  | {\n      type: 'error';\n      errorType: string;\n      errorMessage: string;\n      nextPath: string; // エラーページへのパス\n    };\n\n/**\n * ホスト名から適切なCookieドメインを取得します。\n * 環境変数 `COOKIE_DOMAIN` が設定されていればそれを優先します。\n * 開発環境 (`.saedgewell.test`)、localhost、または本番環境のホスト名に基づいて、\n * サブドメイン間で共有可能なドメイン（先頭にドットが付く）を返します。\n * 例:\n * - host='web.saedgewell.test' -> '.saedgewell.test'\n * - host='saedgewell.net' -> '.saedgewell.net'\n * - host='admin.saedgewell.com' -> '.saedgewell.com'\n * - host='localhost' -> 'localhost' (ドメイン属性なし)\n *\n * @param host リクエストのホスト名 (例: 'web.saedgewell.test', 'saedgewell.net', 'localhost')\n * @returns Cookieに設定するドメイン文字列。localhostの場合はホスト名をそのまま返す。\n */\nfunction getCookieDomain(host: string): string | undefined {\n  // 環境変数で明示的に設定されている場合はそれを使用\n  if (process.env.COOKIE_DOMAIN) {\n    console.log(\n      `[getCookieDomain] Using COOKIE_DOMAIN env var: ${process.env.COOKIE_DOMAIN}`\n    );\n    return process.env.COOKIE_DOMAIN;\n  }\n\n  // 開発環境の場合\n  if (host.includes('.saedgewell.test')) {\n    console.log(\n      `[getCookieDomain] Development host detected: ${host}, returning: .saedgewell.test`\n    );\n    return '.saedgewell.test';\n  }\n\n  // localhost の場合 (ポート番号が含まれる可能性も考慮)\n  if (host === 'localhost' || host.startsWith('localhost:')) {\n    console.log(\n      `[getCookieDomain] Localhost detected: ${host}, returning undefined to skip domain attribute.`\n    );\n    return undefined; // ドメイン属性を設定しない\n  }\n\n  const parts = host.split('.');\n  // example.com や saedgewell.net のようなドメイン (パーツが2つ)\n  if (parts.length === 2) {\n    const domain = `.${host}`;\n    console.log(\n      `[getCookieDomain] Two-part host detected: ${host}, returning: ${domain}`\n    );\n    return domain; // .example.com や .saedgewell.net\n  }\n  // sub.example.com のようなドメイン (パーツが3つ以上)\n  if (parts.length >= 3) {\n    // 最初のサブドメインを除いた部分をドメインとする\n    const domain = `.${parts.slice(1).join('.')}`;\n    console.log(\n      `[getCookieDomain] Multi-part host detected: ${host}, returning: ${domain}`\n    );\n    return domain; // .example.com\n  }\n\n  // 通常は発生しないはずだが、フォールバック\n  console.warn(\n    `[getCookieDomain] Unexpected host format: ${host}, returning host directly.`\n  );\n  return host;\n}\n\n/**\n * 認証コールバックを処理し、リダイレクト先のパスまたはエラー情報を返します。\n * @param request NextRequestオブジェクト\n * @param defaultRedirectPath 認証成功時のデフォルトリダイレクト先\n * @returns HandleCallbackResult\n */\nexport async function handleAuthCallback(\n  request: NextRequest,\n  defaultRedirectPath: string\n): Promise<HandleCallbackResult> {\n  const cookieStore = await cookies();\n  const keys = getSupabaseClientKeys();\n\n  // リクエストURLを正しく構築\n  const host = request.headers.get('host') || 'web.saedgewell.test'; // デフォルト値は環境に応じて変更するべき\n  const protocol = request.headers.get('x-forwarded-proto') || 'https';\n  const path = request.nextUrl.pathname;\n  const search = request.nextUrl.search;\n  const correctUrl = `${protocol}://${host}${path}${search}`;\n  const requestUrl = new URL(correctUrl);\n\n  // ホスト名から適切なCookieドメインを取得\n  const cookieDomain = getCookieDomain(host);\n  console.log(\n    `[handleAuthCallback] Setting cookies for domain: ${cookieDomain ? cookieDomain : 'none (implicit)'}, host: ${host}`\n  );\n\n  // 開発環境のHTTP接続か判定（本番ではHTTPSを強制）\n  const isLocalhost = host === 'localhost' || host.startsWith('localhost:');\n  const isDevelopment = isLocalhost || process.env.NODE_ENV !== 'production';\n  const shouldSecure = !isLocalhost; // localhostではsecure=falseにする\n\n  // Cookie オプションを定義 (これがサブドメイン共有の鍵！)\n  const cookieOptions: CookieOptions = {\n    ...(cookieDomain ? { domain: cookieDomain } : {}), // domainがundefinedの場合は設定しない\n    path: '/',\n    secure: shouldSecure, // localhostではfalse、それ以外はtrue\n    sameSite: 'none', // クロスサイト送信許可\n    httpOnly: true, // JavaScriptからのアクセス防止\n    maxAge: 60 * 60 * 24 * 7, // 例: 7日間\n  };\n\n  console.log(\n    `[handleAuthCallback] Cookie options: ${JSON.stringify({\n      domain: cookieDomain || 'not set',\n      secure: shouldSecure,\n      sameSite: 'none',\n    })}`\n  );\n\n  // createServerClient (新しい推奨シグネチャを使用)\n  const supabaseClient = createServerClient(keys.url, keys.anonKey, {\n    cookies: {\n      async getAll() {\n        const cookies = await cookieStore.getAll();\n        return cookies;\n      },\n      async setAll(cookiesToSet) {\n        try {\n          for (const { name, value, options } of cookiesToSet) {\n            await cookieStore.set({\n              name,\n              value,\n              ...cookieOptions,\n              ...options,\n            });\n          }\n        } catch (error) {\n          console.error('[handleAuthCallback] Error setting cookies:', error);\n        }\n      },\n    },\n  });\n\n  const service = createAuthCallbackService(\n    supabaseClient as unknown as AuthClientInterface\n  );\n\n  try {\n    let nextPath: string;\n    if (requestUrl.searchParams.get('code')) {\n      console.log('[handleAuthCallback] Exchanging code for session...');\n      const { nextPath: resultPath } = await service.exchangeCodeForSession(\n        new Request(correctUrl), // Requestオブジェクトを渡す\n        {\n          redirectPath: defaultRedirectPath,\n        }\n      );\n      console.log(\n        '[handleAuthCallback] Exchange successful, nextPath:',\n        resultPath\n      );\n      nextPath = resultPath;\n    } else {\n      // 古いバージョンの verifyTokenHash の可能性もあるため、存在確認\n      if (typeof service.verifyTokenHash === 'function') {\n        console.log('[handleAuthCallback] Verifying token hash...');\n        const url = await service.verifyTokenHash(new Request(correctUrl), {\n          redirectPath: defaultRedirectPath,\n        });\n        console.log(\n          '[handleAuthCallback] Verification successful, nextPath:',\n          url.pathname + url.search\n        );\n        nextPath = url.pathname + url.search;\n      } else {\n        console.warn(\n          '[handleAuthCallback] service.verifyTokenHash is not available. Assuming code exchange flow.'\n        );\n        // verifyTokenHash がない場合、エラーとするか、デフォルトパスにリダイレクトするか検討\n        throw new Error(\n          'Invalid callback request: No code found and verifyTokenHash not available.'\n        );\n      }\n    }\n    return { type: 'success', nextPath };\n  } catch (error) {\n    console.error(\n      '[handleAuthCallback] Error during callback processing:',\n      error\n    );\n    const errorType =\n      error instanceof Error ? error.constructor.name : typeof error;\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    const errorRedirectPath = `/auth/callback/error?error=${encodeURIComponent('認証処理中にエラーが発生しました')}&error_type=${encodeURIComponent(errorType)}&error_message=${encodeURIComponent(errorMessage)}`;\n\n    return {\n      type: 'error',\n      errorType,\n      errorMessage,\n      nextPath: errorRedirectPath,\n    };\n  }\n}\n"]}