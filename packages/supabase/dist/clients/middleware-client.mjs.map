{"version":3,"sources":["../../src/clients/middleware-client.ts"],"names":[],"mappings":";;;;AAuEO,SAAS,sBAAA,CACd,SACA,QACA,EAAA;AACA,EAAI,IAAA;AACF,IAAA,MAAM,OAAO,qBAAsB,EAAA;AAEnC,IAAA,IAAI,CAAC,IAAA,CAAK,GAAO,IAAA,CAAC,KAAK,OAAS,EAAA;AAC9B,MAAM,MAAA,IAAI,MAAM,6CAA6C,CAAA;AAAA;AAI/D,IAAA,MAAM,MAAM,IAAK,CAAA,GAAA;AAGjB,IAAA,MAAM,IAAO,GAAA,OAAA,CAAQ,OAAQ,CAAA,GAAA,CAAI,MAAM,CAAK,IAAA,EAAA;AAC5C,IAAA,IAAI,MAAS,GAAA,KAAA,CAAA;AAGb,IAAI,IAAA,IAAA,CAAK,UAAW,CAAA,WAAW,CAAG,EAAA;AAChC,MAAS,MAAA,GAAA,WAAA;AAAA,KAGF,MAAA,IAAA,IAAA,CAAK,QAAS,CAAA,iBAAiB,CAAG,EAAA;AACzC,MAAS,MAAA,GAAA,kBAAA;AAAA,KAGF,MAAA,IAAA,IAAA,CAAK,QAAS,CAAA,gBAAgB,CAAG,EAAA;AACxC,MAAS,MAAA,GAAA,iBAAA;AAAA,KAGF,MAAA,IAAA,IAAA,CAAK,QAAS,CAAA,GAAG,CAAG,EAAA;AAC3B,MAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,KAAA,CAAM,GAAG,CAAA;AAC5B,MAAI,IAAA,KAAA,CAAM,UAAU,CAAG,EAAA;AACrB,QAAA,MAAA,GAAS,IAAI,KAAM,CAAA,KAAA,CAAM,EAAE,CAAE,CAAA,IAAA,CAAK,GAAG,CAAC,CAAA,CAAA;AAAA;AACxC;AAaF,IAAO,OAAA,kBAAA,CAAkC,GAAK,EAAA,IAAA,CAAK,OAAS,EAAA;AAAA,MAC1D,OAAS,EAAA;AAAA,QACP,MAAS,GAAA;AACP,UAAI,IAAA;AACF,YAAM,MAAA,UAAA,GAAa,OAAQ,CAAA,OAAA,CAAQ,MAAO,EAAA;AAC1C,YAAO,OAAA,UAAA;AAAA,mBACA,KAAO,EAAA;AAEd,YAAQ,OAAA,CAAA,KAAA,CAAM,uCAAuC,KAAK,CAAA;AAC1D,YAAA,OAAO,EAAC;AAAA;AACV,SACF;AAAA,QACA,OAAO,YAAc,EAAA;AACnB,UAAI,IAAA;AAEF,YAAA,KAAA,MAAW,EAAE,IAAA,EAAM,KAAM,EAAA,IAAK,YAAc,EAAA;AAC1C,cAAQ,OAAA,CAAA,OAAA,CAAQ,GAAI,CAAA,IAAA,EAAM,KAAK,CAAA;AAAA;AAIjC,YAAA,KAAA,MAAW,EAAE,IAAA,EAAM,KAAO,EAAA,OAAA,MAAa,YAAc,EAAA;AACnD,cAAA,MAAM,aAAgB,GAAA;AAAA,gBACpB,GAAG,OAAA;AAAA;AAAA,gBAEH,GAAI,MAAA,GAAS,EAAE,MAAA,KAAW,EAAC;AAAA;AAAA,gBAE3B,QAAU,EAAA,MAAA;AAAA;AAAA;AAAA,gBAGV,MAAA,EACE,QAAQ,GAAI,CAAA,QAAA,KAAa,gBACzB,CAAC,IAAA,CAAK,WAAW,WAAW;AAAA,eAChC;AAEA,cAAA,QAAA,CAAS,OAAQ,CAAA,GAAA,CAAI,IAAM,EAAA,KAAA,EAAO,aAAa,CAAA;AAAA;AACjD,mBACO,KAAO,EAAA;AAEd,YAAQ,OAAA,CAAA,KAAA,CAAM,0BAA0B,KAAK,CAAA;AAAA;AAC/C;AACF;AACF,KACD,CAAA;AAAA,WACM,KAAO,EAAA;AACd,IAAQ,OAAA,CAAA,KAAA,CAAM,gDAAgD,KAAK,CAAA;AAEnE,IAAM,MAAA,KAAA;AAAA;AAEV","file":"middleware-client.mjs","sourcesContent":["/**\n * middleware-client.ts\n *\n * このファイルはNext.jsのミドルウェア内でSupabaseクライアントを初期化するための\n * 関数を提供します。\n *\n * 主な機能:\n * - ミドルウェア環境に最適化されたSupabaseクライアントの作成\n * - NextRequestとNextResponseオブジェクトを使用したクッキー管理\n * - 型安全なクライアントインスタンスの提供\n *\n * 処理の流れ:\n * 1. 'server-only'パッケージをインポートして、このコードがクライアントサイドに\n *    バンドルされることを防止\n * 2. NextRequestとNextResponseオブジェクトを引数として受け取る\n * 3. getSupabaseClientKeys()関数を呼び出して環境変数からSupabase URLと匿名キーを取得\n * 4. @supabase/ssrパッケージの createServerClient 関数を使用してクライアントを初期化\n * 5. NextRequestとNextResponseオブジェクトを使用してクッキーの取得と設定を行う\n *    カスタムハンドラを提供\n *    - getAll(): requestからすべてのクッキーを取得\n *    - setAll(): 新しいクッキーをrequestとresponseの両方に設定\n * 6. ジェネリック型パラメータを使用して、型安全なクライアントを返す\n *\n * 特記事項:\n * - クッキーの設定は、requestとresponseの両方に対して行われます。これは、\n *   現在のリクエスト処理中にクッキーを読み取れるようにするためと、\n *   レスポンスでクライアントにクッキーを送信するためです。\n * - サブドメイン間でクッキーを共有するために、domain属性を設定しています。\n *   ローカル開発環境では '.localhost' を使用し、本番環境ではトップレベルドメインに設定します。\n * - サブドメイン間でクッキーを共有するために、domain属性を設定しています。\n *   ローカル開発環境では '.localhost' を使用し、本番環境ではトップレベルドメインに設定します。\n *\n * 使用例:\n * ```\n * // middleware.ts内で\n * export async function middleware(request: NextRequest) {\n *   const response = NextResponse.next();\n *   const supabase = createMiddlewareClient(request, response);\n *\n *   // ユーザー情報の確認\n *   const { data: { user } } = await supabase.auth.getUser();\n *   // ユーザー情報の確認\n *   const { data: { user } } = await supabase.auth.getUser();\n *\n *   return response;\n * }\n * ```\n *\n * 注意点:\n * - このクライアントはNext.jsのミドルウェア内でのみ使用することを想定しています\n * - 環境変数 NEXT_PUBLIC_SUPABASE_URL と NEXT_PUBLIC_SUPABASE_ANON_KEY が\n *   設定されている必要があります\n * - サブドメイン間でクッキーを共有するには、同じトップレベルドメインが必要です\n * - サブドメイン間でクッキーを共有するには、同じトップレベルドメインが必要です\n */\nimport 'server-only';\n\nimport type { NextRequest, NextResponse } from 'next/server';\n\nimport { createServerClient } from '@supabase/ssr';\n\nimport type { Database } from '../database.types';\nimport { getSupabaseClientKeys } from '../get-supabase-client-keys';\n\n/**\n * Supabase用のミドルウェアクライアントを作成します。\n *\n * @param {NextRequest} request - Next.jsのリクエストオブジェクト。\n * @param {NextResponse} response - Next.jsのレスポンスオブジェクト。\n * @throws {Error} クライアントキーの取得に失敗した場合、またはクライアント初期化に失敗した場合にエラーをスローします。\n */\nexport function createMiddlewareClient<GenericSchema = Database>(\n  request: NextRequest,\n  response: NextResponse\n) {\n  try {\n    const keys = getSupabaseClientKeys();\n\n    if (!keys.url || !keys.anonKey) {\n      throw new Error('Supabase client keys are missing or invalid');\n    }\n\n    // 常に getSupabaseClientKeys() から取得した URL を使用\n    const url = keys.url;\n\n    // ホスト名からドメイン設定を決定\n    const host = request.headers.get('host') || ''; // e.g., \"localhost:2121\"\n    let domain = undefined;\n\n    // localhostの場合を明示的に処理\n    if (host.startsWith('localhost')) {\n      domain = 'localhost'; // ポートなし、ドットなし\n    }\n    // 開発環境の場合 (.saedgewell.test)\n    else if (host.includes('saedgewell.test')) {\n      domain = '.saedgewell.test';\n    }\n    // 本番環境の場合 (.saedgewell.net)\n    else if (host.includes('saedgewell.net')) {\n      domain = '.saedgewell.net';\n    }\n    // その他のドメインの場合: トップレベルドメインを抽出\n    else if (host.includes('.')) {\n      const parts = host.split('.');\n      if (parts.length >= 2) {\n        domain = `.${parts.slice(-2).join('.')}`;\n      }\n    }\n    // 環境変数によるドメイン設定の上書き (コメントアウトされたまま)\n    /*\n    if (process.env.AUTH_COOKIE_DOMAIN) {\n      domain = process.env.AUTH_COOKIE_DOMAIN;\n    } else if (process.env.COOKIE_DOMAIN) {\n      domain = process.env.COOKIE_DOMAIN;\n    } else if (process.env.SUPABASE_AUTH_COOKIE_DOMAIN) {\n      domain = process.env.SUPABASE_AUTH_COOKIE_DOMAIN;\n    }\n    */\n\n    return createServerClient<GenericSchema>(url, keys.anonKey, {\n      cookies: {\n        getAll() {\n          try {\n            const allCookies = request.cookies.getAll();\n            return allCookies;\n          } catch (error) {\n            // クッキー取得エラーをハンドリング\n            console.error('Failed to get cookies from request:', error);\n            return [];\n          }\n        },\n        setAll(cookiesToSet) {\n          try {\n            // リクエストにクッキーを設定\n            for (const { name, value } of cookiesToSet) {\n              request.cookies.set(name, value);\n            }\n\n            // レスポンスにクッキーを設定（ドメイン付き）\n            for (const { name, value, options } of cookiesToSet) {\n              const cookieOptions = {\n                ...options,\n                // ドメインが存在する場合のみ設定\n                ...(domain ? { domain } : {}),\n                // SameSite属性を常に'none'に設定して、サードパーティCookie制限に対応\n                sameSite: 'none' as const,\n                // 'none'を使用する場合はsecureが必須だが、開発環境(HTTP)ではfalseにする\n                // NODE_ENVが'production'でない場合、または localhost でない場合は true を推奨\n                secure:\n                  process.env.NODE_ENV === 'production' ||\n                  !host.startsWith('localhost'),\n              };\n\n              response.cookies.set(name, value, cookieOptions);\n            }\n          } catch (error) {\n            // クッキー設定エラーをハンドリング\n            console.error('Failed to set cookies:', error);\n          }\n        },\n      },\n    });\n  } catch (error) {\n    console.error('Failed to create Supabase middleware client:', error);\n    // エラーを再スローして呼び出し元に通知\n    throw error;\n  }\n}\n"]}