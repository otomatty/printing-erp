{"version":3,"sources":["../../src/get-service-role-key.ts","../../src/clients/server-admin-client.ts"],"names":[],"mappings":";;;;AAuCA,IAAM,OACJ,GAAA,mGAAA;AAOK,SAAS,iBAAoB,GAAA;AAClC,EAAA,OAAO,EACJ,MAAO,CAAA;AAAA,IACN,cAAgB,EAAA;AAAA,GACjB,CACA,CAAA,GAAA,CAAI,CAAG,EAAA;AAAA,IACN;AAAA,GACD,CAAA,CACA,KAAM,CAAA,OAAA,CAAQ,IAAI,yBAAyB,CAAA;AAChD;AAKO,SAAS,uBAA0B,GAAA;AACxC,EAAI,IAAA,OAAA,CAAQ,GAAI,CAAA,QAAA,KAAa,YAAc,EAAA;AACzC,IAAQ,OAAA,CAAA,IAAA;AAAA,MACN,CAAA,2HAAA;AAAA,KACF;AAAA;AAEJ;;;ACRO,SAAS,4BAAyD,GAAA;AACvE,EAAwB,uBAAA,EAAA;AAExB,EAAM,MAAA,GAAA,GAAM,uBAAwB,CAAA,GAAA;AAEpC,EAAO,OAAA,YAAA,CAA4B,GAAK,EAAA,iBAAA,EAAqB,EAAA;AAAA,IAC3D,IAAM,EAAA;AAAA,MACJ,cAAgB,EAAA,KAAA;AAAA,MAChB,kBAAoB,EAAA,KAAA;AAAA,MACpB,gBAAkB,EAAA;AAAA;AACpB,GACD,CAAA;AACH","file":"server-admin-client.mjs","sourcesContent":["/**\n * get-service-role-key.ts\n *\n * このファイルはSupabaseのサービスロールキー（高い権限を持つキー）を環境変数から\n * 取得し検証するためのユーティリティ関数を提供します。\n *\n * 主な機能:\n * - 環境変数からサービスロールキーを安全に取得\n * - zodを使用したキーの検証\n * - 開発環境での警告メッセージの表示\n *\n * 処理の流れ:\n * 1. getServiceRoleKey関数: 環境変数SUPABASE_SERVICE_ROLE_KEYからキーを取得し、\n *    zodを使用して値が存在することを検証\n * 2. warnServiceRoleKeyUsage関数: 開発環境でサービスロールキーが使用されている場合に\n *    警告メッセージをコンソールに表示\n *\n * 特記事項:\n * - 'server-only'パッケージを使用して、このコードがクライアントサイドにバンドルされることを防止\n *   （セキュリティ上重要）\n * - サービスロールキーはRow Level Security (RLS)をバイパスする能力を持つため、\n *   取り扱いには注意が必要\n *\n * 使用例:\n * ```\n * // server-admin-client.tsなどで\n * const serviceRoleKey = getServiceRoleKey();\n * const client = createClient(url, serviceRoleKey, options);\n * ```\n *\n * 注意点:\n * - このファイルの関数はセキュリティ上の理由から、必ずサーバーサイドでのみ使用すべきです\n * - 環境変数SUPABASE_SERVICE_ROLE_KEYが設定されていない場合、明確なエラーメッセージが表示されます\n * - サービスロールキーは必要な場合にのみ使用し、不必要な使用は避けるべきです\n */\nimport 'server-only';\n\nimport { z } from 'zod';\n\nconst message =\n  'Invalid Supabase Service Role Key. Please add the environment variable SUPABASE_SERVICE_ROLE_KEY.';\n\n/**\n * @name getServiceRoleKey\n * @description Get the Supabase Service Role Key.\n * ONLY USE IN SERVER-SIDE CODE. DO NOT EXPOSE THIS TO CLIENT-SIDE CODE.\n */\nexport function getServiceRoleKey() {\n  return z\n    .string({\n      required_error: message,\n    })\n    .min(1, {\n      message: message,\n    })\n    .parse(process.env.SUPABASE_SERVICE_ROLE_KEY);\n}\n\n/**\n * Displays a warning message if the Supabase Service Role is being used.\n */\nexport function warnServiceRoleKeyUsage() {\n  if (process.env.NODE_ENV !== 'production') {\n    console.warn(\n      `[Dev Only] This is a simple warning to let you know you are using the Supabase Service Role. Make sure it's the right call.`\n    );\n  }\n}\n","/**\n * server-admin-client.ts\n *\n * このファイルは管理者権限を持つSupabaseクライアントをサーバー環境で初期化するための\n * 関数を提供します。\n *\n * 主な機能:\n * - 管理者権限（サービスロールキー）を使用したSupabaseクライアントの作成\n * - Row Level Security (RLS)をバイパスする能力\n *  - つまりRLSを無視してデータベースを操作できる\n * - 型安全なクライアントインスタンスの提供\n *\n * 処理の流れ:\n * 1. 'server-only'パッケージをインポートして、このコードがクライアントサイドに\n *    バンドルされることを防止（セキュリティ上重要）\n * 2. warnServiceRoleKeyUsage()関数を呼び出して、開発環境で警告メッセージを表示\n * 3. getSupabaseClientKeys()関数からSupabase URLを取得\n * 4. getServiceRoleKey()関数から環境変数のサービスロールキーを取得\n * 5. @supabase/supabase-jsパッケージの createClient 関数を使用してクライアントを初期化\n *    - 認証関連のオプションを無効化（persistSession: false, detectSessionInUrl: false,\n *      autoRefreshToken: false）\n * 6. ジェネリック型パラメータを使用して、型安全なクライアントを返す\n *\n * 特記事項:\n * - このクライアントは通常のクライアントとは異なり、サービスロールキー（高い権限を持つキー）\n *   を使用します。これにより、Row Level Security (RLS)をバイパスし、データベースに対する\n *   完全なアクセス権を持ちます。\n * - 開発環境では、このクライアントの使用時に警告メッセージが表示されます。\n *\n * 使用例:\n * ```\n * // サーバーサイドコード内で\n * const adminClient = getSupabaseServerAdminClient();\n * // RLSをバイパスしてデータを取得\n * const { data } = await adminClient.from('protected_table').select('*');\n * ```\n *\n * 注意点:\n * - このクライアントはセキュリティ上の理由から、必ずサーバーサイドでのみ使用すべきです\n * - 環境変数 SUPABASE_SERVICE_ROLE_KEY が設定されている必要があります\n * - 不必要にこのクライアントを使用せず、必要な場合にのみ使用してください\n * - ユーザー管理、バックグラウンドジョブ、RLSをバイパスする必要がある管理タスクなど、\n *   特権的な操作に使用されることを想定しています\n */\nimport 'server-only';\n\nimport { createClient } from '@supabase/supabase-js';\n\nimport type { Database } from '../database.types';\nimport {\n  getServiceRoleKey,\n  warnServiceRoleKeyUsage,\n} from '../get-service-role-key';\nimport { getSupabaseClientKeys } from '../get-supabase-client-keys';\n\n/**\n * @name getSupabaseServerAdminClient\n * @description データベースへの管理者アクセス権を持つ、サーバーで使用するためのSupabaseクライアントを取得します。\n */\nexport function getSupabaseServerAdminClient<GenericSchema = Database>() {\n  warnServiceRoleKeyUsage();\n\n  const url = getSupabaseClientKeys().url;\n\n  return createClient<GenericSchema>(url, getServiceRoleKey(), {\n    auth: {\n      persistSession: false,\n      detectSessionInUrl: false,\n      autoRefreshToken: false,\n    },\n  });\n}\n"]}