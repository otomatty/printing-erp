{"version":3,"sources":["../src/require-user.ts"],"names":["checkRequiresMultiFactorAuthentication"],"mappings":";;;;;AAwDA,IAAM,6BAAgC,GAAA,GAAA;AACtC,IAAM,YAAe,GAAA,GAAA;AAOrB,eAAsB,YAAY,MAiBhC,EAAA;AACA,EAAA,MAAM,EAAE,IAAM,EAAA,KAAA,KAAU,MAAM,MAAA,CAAO,KAAK,OAAQ,EAAA;AAGlD,EAAI,IAAA,CAAC,IAAK,CAAA,IAAA,IAAQ,KAAO,EAAA;AACvB,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,IAAA;AAAA,MACN,KAAA,EAAO,IAAI,mBAAoB,EAAA;AAAA,MAC/B,UAAY,EAAA;AAAA,KACd;AAAA;AAIF,EAAA,MAAM,SAAY,GAAA,MAAA;AAClB,EAAM,MAAA,WAAA,GAAc,MAAMA,uDAAA,CAAuC,SAAS,CAAA;AAI1E,EAAA,IAAI,WAAa,EAAA;AACf,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,IAAA;AAAA,MACN,KAAA,EAAO,IAAI,oBAAqB,EAAA;AAAA,MAChC,UAAY,EAAA;AAAA,KACd;AAAA;AAGF,EAAO,OAAA;AAAA,IACL,KAAO,EAAA,IAAA;AAAA,IACP,MAAM,IAAK,CAAA;AAAA;AAAA,GACb;AACF;AAEA,IAAM,mBAAA,GAAN,cAAkC,KAAM,CAAA;AAAA,EACtC,WAAc,GAAA;AACZ,IAAA,KAAA,CAAM,yBAAyB,CAAA;AAAA;AAEnC,CAAA;AAEA,IAAM,oBAAA,GAAN,cAAmC,KAAM,CAAA;AAAA,EACvC,WAAc,GAAA;AACZ,IAAA,KAAA,CAAM,sCAAsC,CAAA;AAAA;AAEhD,CAAA","file":"chunk-2AH5RCQI.js","sourcesContent":["/**\n * require-user.ts\n *\n * このファイルは保護されたルートやAPIエンドポイントで認証済みユーザーを要求するための\n * ユーティリティ関数を提供します。\n *\n * 主な機能:\n * - 現在のセッションからユーザー情報の取得と検証\n * - 未認証ユーザーの検出とサインインページへのリダイレクト情報の提供\n * - 多要素認証（MFA）が必要なユーザーの検出とMFA検証ページへのリダイレクト情報の提供\n *\n * 処理の流れ:\n * 1. Supabaseクライアントからユーザー情報を取得\n * 2. ユーザーが存在しない場合、AuthenticationErrorをスローし、サインインページへの\n *    リダイレクト情報を返す\n * 3. ユーザーが存在する場合、多要素認証が必要かどうかを確認\n * 4. 多要素認証が必要な場合、MultiFactorAuthErrorをスローし、MFA検証ページへの\n *    リダイレクト情報を返す\n * 5. すべての条件を満たす場合、ユーザー情報を返す\n *\n * 特記事項:\n * - AuthenticationErrorとMultiFactorAuthErrorの2つのカスタムエラークラスを定義\n * - check-requires-mfa.tsと連携して多要素認証の要件を確認\n *\n * 使用例:\n * ```\n * // 保護されたルートやAPIエンドポイントで\n * const supabase = getSupabaseServerClient();\n * const { data: user, error, redirectTo } = await requireUser(supabase);\n *\n * if (error) {\n *   // ユーザーを適切なページにリダイレクト\n *   redirect(redirectTo);\n * }\n *\n * // 認証済みユーザーとしての処理を続行\n * ```\n *\n * 注意点:\n * - このファイルはサーバーサイドでのみ使用することを想定しています\n * - 認証が必要なページやAPIエンドポイントの入り口で使用し、未認証ユーザーのアクセスを防ぎます\n * - リダイレクトパスは定数として定義されており、必要に応じてカスタマイズできます\n */\nimport type { SupabaseClient, User } from '@supabase/supabase-js';\nimport type { Database } from './database';\n\nimport {\n  checkRequiresMultiFactorAuthentication,\n  type MfaCheckerClient,\n} from './check-requires-mfa';\n\n// カスタム型の代わりに標準のSupabaseClientを拡張した型を使用\nexport type UserRequireClient = SupabaseClient<Database> & {\n  auth: SupabaseClient<Database>['auth'] & MfaCheckerClient['auth'];\n};\n\nconst MULTI_FACTOR_AUTH_VERIFY_PATH = '/';\nconst SIGN_IN_PATH = '/';\n\n/**\n * @name requireUser\n * @description Require a session to be present in the request\n * @param client - SupabaseClient型のクライアント\n */\nexport async function requireUser(client: SupabaseClient<Database>): Promise<\n  | {\n      error: null;\n      data: User;\n    }\n  | (\n      | {\n          error: AuthenticationError;\n          data: null;\n          redirectTo: string;\n        }\n      | {\n          error: MultiFactorAuthError;\n          data: null;\n          redirectTo: string;\n        }\n    )\n> {\n  const { data, error } = await client.auth.getUser();\n\n  // User型のチェック\n  if (!data.user || error) {\n    return {\n      data: null,\n      error: new AuthenticationError(),\n      redirectTo: SIGN_IN_PATH,\n    };\n  }\n\n  // client型をMfaCheckerClientの要件を満たすように調整\n  const mfaClient = client as unknown as MfaCheckerClient;\n  const requiresMfa = await checkRequiresMultiFactorAuthentication(mfaClient);\n\n  // If the user requires multi-factor authentication,\n  // redirect them to the page where they can verify their identity.\n  if (requiresMfa) {\n    return {\n      data: null,\n      error: new MultiFactorAuthError(),\n      redirectTo: MULTI_FACTOR_AUTH_VERIFY_PATH,\n    };\n  }\n\n  return {\n    error: null,\n    data: data.user, // 認証済みユーザーデータを返す (User型)\n  };\n}\n\nclass AuthenticationError extends Error {\n  constructor() {\n    super('Authentication required');\n  }\n}\n\nclass MultiFactorAuthError extends Error {\n  constructor() {\n    super('Multi-factor authentication required');\n  }\n}\n"]}