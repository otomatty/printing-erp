{"version":3,"sources":["../src/clients/browser-client.ts"],"names":[],"mappings":";;;AAqCO,SAAS,wBAAqD,GAAA;AACnE,EAAA,MAAM,OAAO,qBAAsB,EAAA;AAEnC,EAAA,MAAM,MAAM,IAAK,CAAA,GAAA;AAGjB,EAAA,IAAI,MAA6B,GAAA,MAAA;AAMjC,EAAA,MAAM,WACJ,OAAO,MAAA,KAAW,WAAc,GAAA,MAAA,CAAO,SAAS,QAAW,GAAA,EAAA;AAE7D,EAAA,IAAI,aAAa,WAAa,EAAA;AAE5B,IAAS,MAAA,GAAA,MAAA;AAAA,GACA,MAAA,IAAA,QAAA,CAAS,QAAS,CAAA,iBAAiB,CAAG,EAAA;AAE/C,IAAS,MAAA,GAAA,kBAAA;AAAA,GACA,MAAA,IAAA,QAAA,CAAS,QAAS,CAAA,gBAAgB,CAAG,EAAA;AAE9C,IAAS,MAAA,GAAA,iBAAA;AAAA;AAIX,EAAA,MAAM,aAAgB,GAAA;AAAA;AAAA,IAEpB,GAAI,MAAA,GAAS,EAAE,MAAA,KAAW,EAAC;AAAA,IAC3B,IAAM,EAAA,GAAA;AAAA,IACN,QAAU,EAAA,MAAA;AAAA;AAAA,IACV,MAAQ,EAAA;AAAA;AAAA,GACV;AAEA,EAAO,OAAA,mBAAA,CAAmC,GAAK,EAAA,IAAA,CAAK,OAAS,EAAA;AAAA,IAC3D;AAAA,GACD,CAAA;AACH","file":"chunk-3CV4FUBH.mjs","sourcesContent":["/**\n * browser-client.ts\n *\n * このファイルはブラウザ環境（クライアントサイド）でSupabaseクライアントを初期化するための\n * 関数を提供します。\n *\n * 主な機能:\n * - ブラウザ環境に最適化されたSupabaseクライアントの作成\n * - 環境変数からSupabase URLと匿名キーを取得して使用\n * - 型安全なクライアントインスタンスの提供\n *\n * 処理の流れ:\n * 1. getSupabaseClientKeys()関数を呼び出して環境変数からSupabase URLと匿名キーを取得\n * 2. @supabase/ssrパッケージの createBrowserClient 関数を使用してクライアントを初期化\n * 3. ジェネリック型パラメータを使用して、型安全なクライアントを返す\n *    (デフォルトではDatabase型を使用するが、カスタム型も指定可能)\n *\n * 使用例:\n * ```\n * const supabase = getSupabaseBrowserClient();\n * const { data } = await supabase.from('table').select('*');\n * ```\n *\n * 注意点:\n * - このクライアントはブラウザ環境でのみ使用することを想定しています\n * - クライアントコンポーネント内でのみ使用可能です\n * - 環境変数 NEXT_PUBLIC_SUPABASE_URL と NEXT_PUBLIC_SUPABASE_ANON_KEY が\n *   設定されている必要があります\n */\nimport { createBrowserClient } from '@supabase/ssr';\nimport type { Database } from '../database.types';\nimport { getSupabaseClientKeys } from '../get-supabase-client-keys';\n\n/**\n * @name getSupabaseBrowserClient\n * @description ブラウザで使用するためのSupabaseクライアントを取得します\n */\nexport function getSupabaseBrowserClient<GenericSchema = Database>() {\n  const keys = getSupabaseClientKeys();\n  // キーズから直接URLを使用（getSupabaseClientKeysで環境によって適切なURLが選択される）\n  const url = keys.url;\n\n  // ドメイン設定\n  let domain: string | undefined = undefined; // 環境変数参照を削除し、初期値を undefined に\n  /* // コメントアウト開始\n    process.env.AUTH_COOKIE_DOMAIN || '.saedgewell.test';\n  */ // コメントアウト終了\n\n  // ホスト名からローカル環境かどうかを判断\n  const hostname =\n    typeof window !== 'undefined' ? window.location.hostname : '';\n\n  if (hostname === 'localhost') {\n    // ローカル環境の場合はドメイン設定をしない\n    domain = undefined;\n  } else if (hostname.includes('saedgewell.test')) {\n    // Docker環境の場合は明示的に.saedgewell.testを設定\n    domain = '.saedgewell.test';\n  } else if (hostname.includes('saedgewell.net')) {\n    // 本番環境の場合は明示的に.saedgewell.netを設定\n    domain = '.saedgewell.net';\n  }\n\n  // Cookieオプションを設定\n  const cookieOptions = {\n    // ドメインが存在する場合のみ設定\n    ...(domain ? { domain } : {}),\n    path: '/',\n    sameSite: 'none' as const, // 'lax'から'none'に変更してサードパーティCookie制限に対応\n    secure: true, // 常にtrueに設定して、サブドメイン間で共有可能にする\n  };\n\n  return createBrowserClient<GenericSchema>(url, keys.anonKey, {\n    cookieOptions,\n  });\n}\n"]}