{"version":3,"sources":["../src/database.types.ts"],"names":[],"mappings":";AAodO,IAAM,SAAY,GAAA;AAAA,EACvB,MAAQ,EAAA;AAAA,IACN,KAAO,EAAA;AAAA,MACL,UAAA,EAAY,CAAC,OAAA,EAAS,OAAO;AAAA;AAC/B,GACF;AAAA,EACA,MAAQ,EAAA;AAAA,IACN,OAAO;AAAC;AAEZ","file":"database.types.mjs","sourcesContent":["export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\nexport type Database = {\n  public: {\n    Tables: {\n      news: {\n        Row: {\n          author_id: string | null\n          category_id: string | null\n          content: string\n          created_at: string\n          id: string\n          is_featured: boolean | null\n          publish_end_date: string | null\n          published_at: string | null\n          slug: string\n          status: string\n          summary: string | null\n          thumbnail_url: string | null\n          title: string\n          updated_at: string\n        }\n        Insert: {\n          author_id?: string | null\n          category_id?: string | null\n          content: string\n          created_at?: string\n          id?: string\n          is_featured?: boolean | null\n          publish_end_date?: string | null\n          published_at?: string | null\n          slug: string\n          status?: string\n          summary?: string | null\n          thumbnail_url?: string | null\n          title: string\n          updated_at?: string\n        }\n        Update: {\n          author_id?: string | null\n          category_id?: string | null\n          content?: string\n          created_at?: string\n          id?: string\n          is_featured?: boolean | null\n          publish_end_date?: string | null\n          published_at?: string | null\n          slug?: string\n          status?: string\n          summary?: string | null\n          thumbnail_url?: string | null\n          title?: string\n          updated_at?: string\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"news_author_id_fkey\"\n            columns: [\"author_id\"]\n            isOneToOne: false\n            referencedRelation: \"user_accounts\"\n            referencedColumns: [\"id\"]\n          },\n          {\n            foreignKeyName: \"news_category_id_fkey\"\n            columns: [\"category_id\"]\n            isOneToOne: false\n            referencedRelation: \"news_categories\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      news_attachments: {\n        Row: {\n          created_at: string\n          file_name: string\n          file_path: string\n          file_size: number\n          file_type: string\n          id: string\n          news_id: string | null\n        }\n        Insert: {\n          created_at?: string\n          file_name: string\n          file_path: string\n          file_size: number\n          file_type: string\n          id?: string\n          news_id?: string | null\n        }\n        Update: {\n          created_at?: string\n          file_name?: string\n          file_path?: string\n          file_size?: number\n          file_type?: string\n          id?: string\n          news_id?: string | null\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"news_attachments_news_id_fkey\"\n            columns: [\"news_id\"]\n            isOneToOne: false\n            referencedRelation: \"news\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      news_categories: {\n        Row: {\n          created_at: string\n          description: string | null\n          display_order: number | null\n          id: string\n          name: string\n          slug: string\n          updated_at: string\n        }\n        Insert: {\n          created_at?: string\n          description?: string | null\n          display_order?: number | null\n          id?: string\n          name: string\n          slug: string\n          updated_at?: string\n        }\n        Update: {\n          created_at?: string\n          description?: string | null\n          display_order?: number | null\n          id?: string\n          name?: string\n          slug?: string\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      user_accounts: {\n        Row: {\n          address: Json | null\n          auth_user_id: string\n          avatar_url: string | null\n          company_name: string | null\n          created_at: string\n          email: string | null\n          first_name: string | null\n          full_name: string | null\n          id: string\n          is_guest: boolean\n          last_name: string | null\n          metadata: Json | null\n          phone_number: string | null\n          preferences: Json | null\n          updated_at: string\n          visibility_flags: Json | null\n        }\n        Insert: {\n          address?: Json | null\n          auth_user_id: string\n          avatar_url?: string | null\n          company_name?: string | null\n          created_at?: string\n          email?: string | null\n          first_name?: string | null\n          full_name?: string | null\n          id?: string\n          is_guest?: boolean\n          last_name?: string | null\n          metadata?: Json | null\n          phone_number?: string | null\n          preferences?: Json | null\n          updated_at?: string\n          visibility_flags?: Json | null\n        }\n        Update: {\n          address?: Json | null\n          auth_user_id?: string\n          avatar_url?: string | null\n          company_name?: string | null\n          created_at?: string\n          email?: string | null\n          first_name?: string | null\n          full_name?: string | null\n          id?: string\n          is_guest?: boolean\n          last_name?: string | null\n          metadata?: Json | null\n          phone_number?: string | null\n          preferences?: Json | null\n          updated_at?: string\n          visibility_flags?: Json | null\n        }\n        Relationships: []\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      check_is_admin: {\n        Args: Record<PropertyKey, never>\n        Returns: boolean\n      }\n    }\n    Enums: {\n      admin_role: \"admin\" | \"staff\"\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n  system: {\n    Tables: {\n      admin_quick_access: {\n        Row: {\n          admin_user_id: string\n          created_at: string | null\n          display_order: number\n          id: string\n          is_visible: boolean | null\n          item_id: string\n          updated_at: string | null\n        }\n        Insert: {\n          admin_user_id: string\n          created_at?: string | null\n          display_order: number\n          id?: string\n          is_visible?: boolean | null\n          item_id: string\n          updated_at?: string | null\n        }\n        Update: {\n          admin_user_id?: string\n          created_at?: string | null\n          display_order?: number\n          id?: string\n          is_visible?: boolean | null\n          item_id?: string\n          updated_at?: string | null\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"admin_quick_access_admin_user_id_fkey\"\n            columns: [\"admin_user_id\"]\n            isOneToOne: false\n            referencedRelation: \"admin_users\"\n            referencedColumns: [\"id\"]\n          },\n          {\n            foreignKeyName: \"admin_quick_access_item_id_fkey\"\n            columns: [\"item_id\"]\n            isOneToOne: false\n            referencedRelation: \"quick_access_items\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      admin_users: {\n        Row: {\n          auth_user_id: string\n          created_at: string\n          email: string | null\n          first_name: string | null\n          id: string\n          is_active: boolean\n          last_name: string | null\n          role: Database[\"public\"][\"Enums\"][\"admin_role\"]\n          updated_at: string\n        }\n        Insert: {\n          auth_user_id: string\n          created_at?: string\n          email?: string | null\n          first_name?: string | null\n          id?: string\n          is_active?: boolean\n          last_name?: string | null\n          role?: Database[\"public\"][\"Enums\"][\"admin_role\"]\n          updated_at?: string\n        }\n        Update: {\n          auth_user_id?: string\n          created_at?: string\n          email?: string | null\n          first_name?: string | null\n          id?: string\n          is_active?: boolean\n          last_name?: string | null\n          role?: Database[\"public\"][\"Enums\"][\"admin_role\"]\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      quick_access_items: {\n        Row: {\n          category_id: string\n          created_at: string | null\n          description: string\n          display_order: number\n          href: string\n          icon: string\n          id: string\n          is_default: boolean | null\n          is_enabled: boolean | null\n          title: string\n          updated_at: string | null\n        }\n        Insert: {\n          category_id: string\n          created_at?: string | null\n          description: string\n          display_order: number\n          href: string\n          icon: string\n          id?: string\n          is_default?: boolean | null\n          is_enabled?: boolean | null\n          title: string\n          updated_at?: string | null\n        }\n        Update: {\n          category_id?: string\n          created_at?: string | null\n          description?: string\n          display_order?: number\n          href?: string\n          icon?: string\n          id?: string\n          is_default?: boolean | null\n          is_enabled?: boolean | null\n          title?: string\n          updated_at?: string | null\n        }\n        Relationships: []\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      check_is_admin: {\n        Args: Record<PropertyKey, never>\n        Returns: boolean\n      }\n    }\n    Enums: {\n      [_ in never]: never\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n}\n\ntype DefaultSchema = Database[Extract<keyof Database, \"public\">]\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n    ? keyof (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n        Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n      Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R\n    }\n    ? R\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n        DefaultSchema[\"Views\"])\n    ? (DefaultSchema[\"Tables\"] &\n        DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n        Row: infer R\n      }\n      ? R\n      : never\n    : never\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n    ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Insert: infer I\n    }\n    ? I\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Insert: infer I\n      }\n      ? I\n      : never\n    : never\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n    ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Update: infer U\n    }\n    ? U\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Update: infer U\n      }\n      ? U\n      : never\n    : never\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n    | keyof DefaultSchema[\"Enums\"]\n    | { schema: keyof Database },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof Database\n  }\n    ? keyof Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n    : never = never,\n> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n    ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n    : never\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n    | keyof DefaultSchema[\"CompositeTypes\"]\n    | { schema: keyof Database },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof Database\n  }\n    ? keyof Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n    : never = never,\n> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n    ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n    : never\n\nexport const Constants = {\n  public: {\n    Enums: {\n      admin_role: [\"admin\", \"staff\"],\n    },\n  },\n  system: {\n    Enums: {},\n  },\n} as const\n"]}