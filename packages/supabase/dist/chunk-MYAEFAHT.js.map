{"version":3,"sources":["../src/auth-callback.service.ts"],"names":["ErrorCode","error"],"mappings":"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","file":"chunk-MYAEFAHT.js","sourcesContent":["/**\n * auth-callback.service.ts\n *\n * このファイルはSupabaseの認証コールバック処理を管理するサービスを提供します。\n * OAuth認証やマジックリンク認証などの外部認証プロバイダーからのコールバック処理を扱います。\n *\n * 主な機能:\n * - トークンハッシュの検証と適切なリダイレクト処理\n * - 認証コードとセッションの交換\n * - エラーハンドリングと適切なエラーメッセージの生成\n *\n * 処理の流れ:\n * 1. createAuthCallbackService関数でAuthCallbackServiceのインスタンスを作成\n * 2. AuthCallbackServiceクラスが以下の主要メソッドを提供:\n *    - verifyTokenHash: メール認証やパスワードリセットなどのフローで使用\n *    - exchangeCodeForSession: OAuth認証フローで使用\n * 3. エラー発生時は適切なエラーメッセージを生成し、エラーページにリダイレクト\n *\n * 特記事項:\n * - 異なるブラウザでの認証試行など、一般的なエラーケースに対する特別な処理が実装されています\n * - 認証フローの複雑なエッジケースを処理するための堅牢な実装が含まれています\n *\n * 使用例:\n * ```\n * // auth-callback.tsなどのルートハンドラ内で\n * const supabase = getSupabaseServerClient();\n * const service = createAuthCallbackService(supabase);\n *\n * // トークンハッシュの検証\n * const url = await service.verifyTokenHash(request, {\n *   redirectPath: '/dashboard'\n * });\n *\n * // または認証コードとセッションの交換\n * const { nextPath } = await service.exchangeCodeForSession(request, {\n *   redirectPath: '/dashboard'\n * });\n * ```\n *\n * 注意点:\n * - このサービスはサーバーサイドでのみ使用することを想定しています\n * - 認証コールバックの処理は複雑なため、このサービスを使用して適切に処理することが重要です\n */\nimport 'server-only';\n\n// @supabase/supabase-js からの EmailOtpType, AuthError, Session のインポートを削除\n// import type {\n//   AuthError,\n//   EmailOtpType,\n//   SupabaseClient as OriginalSupabaseClient,\n//   Session,\n// } from '@supabase/supabase-js';\n\n/**\n * 汎用的な認証エラーインターフェース\n */\ninterface AuthCallbackError {\n  message: string;\n  status?: number;\n  code?: string | number; // オプショナルな code プロパティを追加\n  // 必要に応じて他のプロパティを追加\n}\n\n/**\n * 汎用的な認証セッションインターフェース\n */\ninterface AuthCallbackSession {\n  // セッションに必要な最低限のプロパティを定義\n  // 例: accessToken?: string; user?: AuthCallbackUser | null;\n  [key: string]: unknown; // より柔軟性を持たせる\n}\n\n/**\n * 汎用的な認証ユーザーインターフェース\n */\ninterface AuthCallbackUser {\n  // ユーザーに必要な最低限のプロパティを定義\n  // 例: id: string; email?: string;\n  [key: string]: unknown; // より柔軟性を持たせる\n}\n\n/**\n * 認証クライアントインターフェース (汎用化版)\n * Supabaseクライアントから必要な機能のみを抽出したインターフェース\n */\nexport interface AuthClientInterface {\n  auth: {\n    verifyOtp(params: {\n      type: string; // EmailOtpType から string に変更\n      token_hash: string;\n    }): Promise<{\n      data?: { user?: AuthCallbackUser | null } | null; // 汎用的な型に変更\n      error?: AuthCallbackError | null; // 汎用的なエラー型に変更\n    }>;\n    exchangeCodeForSession(code: string): Promise<{\n      data: {\n        session: AuthCallbackSession | null; // 汎用的な型に変更\n      } | null;\n      error: AuthCallbackError | null; // 汎用的なエラー型に変更\n    }>;\n  };\n}\n\n/**\n * クッキーを操作するためのサービスインターフェース\n */\nexport interface CookiesService {\n  get(name: string): string | undefined;\n  set(name: string, value: string, options?: CookieOptions): void;\n  delete(name: string, options?: CookieOptions): void;\n}\n\n/**\n * クッキーのオプション\n */\nexport interface CookieOptions {\n  domain?: string;\n  path?: string;\n  maxAge?: number;\n  secure?: boolean;\n  httpOnly?: boolean;\n  sameSite?: 'strict' | 'lax' | 'none';\n}\n\n/**\n * 成功または失敗を表すResultクラス\n * @template T 成功時の値の型\n * @template E 失敗時のエラーの型\n */\nexport class Result<T, E> {\n  private constructor(\n    private readonly _value: T | null,\n    private readonly _error: E | null,\n    private readonly _isOk: boolean\n  ) {}\n\n  static ok<T, E>(value: T): Result<T, E> {\n    return new Result<T, E>(value, null, true);\n  }\n\n  static error<T, E>(error: E): Result<T, E> {\n    return new Result<T, E>(null, error, false);\n  }\n\n  get isOk(): boolean {\n    return this._isOk;\n  }\n\n  get isErr(): boolean {\n    return !this._isOk;\n  }\n\n  get value(): T | null {\n    return this._value;\n  }\n\n  get error(): E | null {\n    return this._error;\n  }\n}\n\n/**\n * 認証コールバックのパラメータ\n */\nexport interface CallbackParams {\n  code?: string;\n  state?: string;\n  error?: string;\n  errorDescription?: string;\n}\n\n/**\n * エラーコード列挙型\n */\nexport enum ErrorCode {\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR',\n  OAUTH_ERROR = 'OAUTH_ERROR',\n  STATE_ERROR = 'STATE_ERROR',\n  STATE_MISMATCH = 'STATE_MISMATCH',\n  CODE_ERROR = 'CODE_ERROR',\n  SESSION_ERROR = 'SESSION_ERROR',\n  CODE_VERIFIER_ERROR = 'CODE_VERIFIER_ERROR',\n  EXCHANGE_ERROR = 'EXCHANGE_ERROR',\n  REDIRECT_ERROR = 'REDIRECT_ERROR',\n  INVALID_REDIRECT = 'INVALID_REDIRECT',\n}\n\n/**\n * @name createAuthCallbackService\n * @description Creates an instance of the AuthCallbackService\n * @param client\n */\nexport function createAuthCallbackService(client: AuthClientInterface) {\n  return new AuthCallbackService(client);\n}\n\n/**\n * @name AuthCallbackService\n * @description Service for handling auth callbacks in Supabase\n *\n * This service handles a variety of situations and edge cases in Supabase Auth.\n *\n */\nclass AuthCallbackService {\n  // PKCE認証用のクッキー名\n  private readonly STATE_COOKIE = 'sb-oauth-state';\n  private readonly CODE_VERIFIER_COOKIE = 'sb-oauth-code-verifier';\n  private readonly REDIRECT_TO_COOKIE = 'sb-redirect-to';\n\n  constructor(private readonly client: AuthClientInterface) {}\n\n  /**\n   * OAuth認証コールバック処理を行います\n   *\n   * @param cookies クッキーサービス\n   * @param callbackParams コールバックパラメータ\n   * @param searchParams URLのクエリパラメータ\n   * @returns リダイレクトURLまたはエラーコード\n   */\n  public async oAuthCallback(\n    cookies: CookiesService,\n    callbackParams: CallbackParams,\n    searchParams: Record<string, string | string[]>\n  ): Promise<Result<string, ErrorCode>> {\n    // stateパラメーターを検証する\n    if (!callbackParams.state) {\n      return Result.error<string, ErrorCode>(ErrorCode.STATE_ERROR);\n    }\n\n    // stateパラメーターのトークンを取得する\n    const stateFromCookie = cookies.get(this.STATE_COOKIE);\n\n    if (!stateFromCookie || stateFromCookie !== callbackParams.state) {\n      this.clearPKCECookies(cookies); // 不一致の場合はクッキーをクリア\n      return Result.error<string, ErrorCode>(ErrorCode.STATE_MISMATCH);\n    }\n\n    // codeパラメーターを検証する\n    if (!callbackParams.code) {\n      return Result.error<string, ErrorCode>(ErrorCode.CODE_ERROR);\n    }\n\n    // codeを交換してセッションを取得する\n    let sessionResult: Result<AuthCallbackSession | null, ErrorCode>;\n    try {\n      sessionResult = await this.exchangeCodeForSessionWithCookies(\n        cookies,\n        callbackParams.code\n      );\n    } catch (error) {\n      return Result.error<string, ErrorCode>(ErrorCode.SESSION_ERROR);\n    }\n\n    if (sessionResult.isErr && sessionResult.error) {\n      return Result.error<string, ErrorCode>(sessionResult.error);\n    }\n\n    // PKCEフローの状態をリセットする\n    this.clearPKCECookies(cookies);\n\n    // 正常にセッションが取得できれば、リダイレクト先URLを返す\n    return this.getRedirectUrl(cookies);\n  }\n\n  /**\n   * @name verifyTokenHash\n   * @description Verifies the token hash and type and redirects the user to the next page\n   * This should be used when using a token hash to verify the user's email\n   * @param request\n   * @param params\n   */\n  async verifyTokenHash(\n    request: Request,\n    params: {\n      redirectPath: string;\n      errorPath?: string;\n    }\n  ): Promise<URL> {\n    const url = new URL(request.url);\n    const searchParams = url.searchParams;\n\n    const host = request.headers.get('host');\n\n    // set the host to the request host since outside of Vercel it gets set as \"localhost\"\n    if (url.host.includes('localhost:') && !host?.includes('localhost')) {\n      url.host = host as string;\n      url.port = '';\n    }\n\n    url.pathname = params.redirectPath;\n\n    const token_hash = searchParams.get('token_hash');\n    const type = searchParams.get('type') as string | null;\n    const callbackParam =\n      searchParams.get('next') ?? searchParams.get('callback');\n\n    let nextPath: string | null = null;\n    const callbackUrl = callbackParam ? new URL(callbackParam) : null;\n\n    // if we have a callback url, we check if it has a next path\n    if (callbackUrl) {\n      // if we have a callback url, we check if it has a next path\n      const callbackNextPath = callbackUrl.searchParams.get('next');\n\n      // if we have a next path in the callback url, we use that\n      if (callbackNextPath) {\n        nextPath = callbackNextPath;\n      } else {\n        nextPath = callbackUrl.pathname;\n      }\n    }\n\n    const errorPath = params.errorPath ?? '/auth/callback/error';\n\n    // remove the query params from the url\n    searchParams.delete('token_hash');\n    searchParams.delete('type');\n    searchParams.delete('next');\n\n    // if we have a next path, we redirect to that path\n    if (nextPath) {\n      url.pathname = nextPath;\n    }\n\n    if (token_hash && type) {\n      const { error } = await this.client.auth.verifyOtp({\n        type,\n        token_hash,\n      });\n\n      if (!error) {\n        return url;\n      }\n\n      if (error.code) {\n        url.searchParams.set('code', error.code.toString());\n      }\n\n      const errorMessage = getAuthErrorMessage({\n        error: error.message,\n        code: error.code?.toString(),\n      });\n\n      url.searchParams.set('error', errorMessage);\n    }\n\n    // return the user to an error page with some instructions\n    url.pathname = errorPath;\n\n    return url;\n  }\n\n  /**\n   * @name exchangeCodeForSession\n   * @description Exchanges the auth code for a session and redirects the user to the next page or an error page\n   * @param request\n   * @param params\n   */\n  async exchangeCodeForSession(\n    request: Request,\n    params: {\n      redirectPath: string;\n      errorPath?: string;\n    }\n  ): Promise<{\n    nextPath: string;\n  }> {\n    const requestUrl = new URL(request.url);\n    const searchParams = requestUrl.searchParams;\n\n    const authCode = searchParams.get('code');\n    const error = searchParams.get('error');\n    const nextUrlPathFromParams = searchParams.get('next');\n    const errorPath = params.errorPath ?? '/auth/callback/error';\n\n    const nextUrl = nextUrlPathFromParams ?? params.redirectPath;\n\n    if (authCode) {\n      try {\n        const { data, error } =\n          await this.client.auth.exchangeCodeForSession(authCode);\n\n        // if we have an error, we redirect to the error page\n        if (error) {\n          return onError({\n            code: error.code?.toString(),\n            error: error.message,\n            path: errorPath,\n          });\n        }\n      } catch (error) {\n        return {\n          nextPath: errorPath,\n        };\n      }\n    } else if (error) {\n      // if we have an error, we redirect to the error page\n      return onError({\n        error,\n        path: errorPath,\n      });\n    }\n\n    return {\n      nextPath: nextUrl,\n    };\n  }\n\n  /**\n   * コードをセッションと交換し、関連するクッキーを処理します\n   *\n   * @param cookies クッキーサービス\n   * @param code 認証コード\n   * @returns セッションまたはエラーコード\n   */\n  private async exchangeCodeForSessionWithCookies(\n    cookies: CookiesService,\n    code: string\n  ): Promise<Result<AuthCallbackSession | null, ErrorCode>> {\n    const codeVerifier = cookies.get(this.CODE_VERIFIER_COOKIE);\n\n    if (!codeVerifier) {\n      return Result.error<AuthCallbackSession | null, ErrorCode>(\n        ErrorCode.CODE_VERIFIER_ERROR\n      );\n    }\n\n    try {\n      const { data, error } =\n        await this.client.auth.exchangeCodeForSession(code);\n\n      // エラーハンドリング\n      if (error) {\n        const errorCodeStr = error.code?.toString(); // 文字列に変換\n        console.error(\n          `OAuth Error: ${error.message}`,\n          { errorCode: errorCodeStr, details: error } // オブジェクトとして渡す\n        );\n        this.clearPKCECookies(cookies);\n        return Result.error<AuthCallbackSession | null, ErrorCode>(\n          ErrorCode.EXCHANGE_ERROR\n        );\n      }\n\n      // セッションデータが存在しない場合や、セッションがnullの場合\n      if (!data || !data.session) {\n        console.error(\n          'Session Error: No session data received after code exchange.'\n        );\n        this.clearPKCECookies(cookies); // エラー時にクッキーをクリア\n        return Result.error<AuthCallbackSession | null, ErrorCode>(\n          ErrorCode.SESSION_ERROR\n        );\n      }\n\n      return Result.ok<AuthCallbackSession | null, ErrorCode>(data.session);\n    } catch (e) {\n      let errorMessage = 'Unknown error during code exchange';\n      let errorCode: string | number | undefined = undefined;\n      const originalError = e;\n\n      // Check if e is an object with potential 'message' and 'code' properties\n      if (e instanceof Error) {\n        errorMessage = e.message;\n        // Check for non-standard code property on Error\n        const errorWithCode = e as Error & { code?: string | number }; // Type assertion with potential code\n        if (\n          typeof errorWithCode.code === 'string' ||\n          typeof errorWithCode.code === 'number'\n        ) {\n          errorCode = errorWithCode.code;\n        }\n      } else if (typeof e === 'object' && e !== null) {\n        // Error インスタンスでないオブジェクトの場合もチェック\n        const potentialError = e as { message?: unknown; code?: unknown };\n        if (typeof potentialError.message === 'string') {\n          errorMessage = potentialError.message;\n        }\n        if (\n          typeof potentialError.code === 'string' ||\n          typeof potentialError.code === 'number'\n        ) {\n          errorCode = potentialError.code;\n        }\n      }\n      // それ以外の場合（文字列やプリミティブなど）はデフォルトメッセージを使用\n\n      const errorCodeStrFromCatch = errorCode?.toString(); // 文字列に変換\n      console.error(\n        `Unexpected error: ${errorMessage}`,\n        { errorCode: errorCodeStrFromCatch, errorDetails: originalError } // オブジェクトとして渡す\n      );\n      this.clearPKCECookies(cookies);\n      return Result.error<AuthCallbackSession | null, ErrorCode>(\n        ErrorCode.UNKNOWN_ERROR\n      );\n    }\n  }\n\n  /**\n   * リダイレクトURLを取得します\n   *\n   * @param cookies クッキーサービス\n   * @returns リダイレクトURLまたはエラーコード\n   */\n  public async getRedirectUrl(\n    cookies: CookiesService\n  ): Promise<Result<string, ErrorCode>> {\n    try {\n      const redirectTo = cookies.get(this.REDIRECT_TO_COOKIE);\n\n      if (!redirectTo) {\n        return Result.error<string, ErrorCode>(ErrorCode.REDIRECT_ERROR);\n      }\n\n      const isValidUrl = await this.isValidRedirectUrl(redirectTo);\n\n      if (!isValidUrl) {\n        return Result.error<string, ErrorCode>(ErrorCode.INVALID_REDIRECT);\n      }\n\n      return Result.ok<string, ErrorCode>(redirectTo);\n    } catch (error) {\n      return Result.error<string, ErrorCode>(ErrorCode.UNKNOWN_ERROR);\n    }\n  }\n\n  /**\n   * 許可されたリダイレクトURLのリストを取得します\n   */\n  private async getAllowedRedirectUrls(): Promise<string[]> {\n    try {\n      // 実装されるリダイレクトURL取得ロジック...\n      // 例: const urls = await this.someService.getAllowedRedirectUrls();\n\n      // この例では静的なURLリストを返します\n      return [\n        'http://localhost:3000',\n        'http://saedgewell.test',\n        'http://docs.saedgewell.test',\n        'http://admin.saedgewell.test',\n        'https://saedgewell.test',\n        'https://docs.saedgewell.test',\n        'https://admin.saedgewell.test',\n        'https://saedgewell.net',\n        'https://docs.saedgewell.net',\n        'https://admin.saedgewell.net',\n      ];\n    } catch (error) {\n      return [];\n    }\n  }\n\n  /**\n   * リダイレクトURLが有効かどうかを確認します\n   *\n   * @param url チェックするURL\n   * @returns 有効な場合はtrue、そうでない場合はfalse\n   */\n  private async isValidRedirectUrl(url: string): Promise<boolean> {\n    try {\n      const allowedUrls = await this.getAllowedRedirectUrls();\n      const parsedUrl = new URL(url);\n\n      // origin部分（protocol + hostname + port）のみを比較\n      return allowedUrls.some((allowedUrl) => {\n        try {\n          const parsedAllowedUrl = new URL(allowedUrl);\n          return parsedUrl.origin === parsedAllowedUrl.origin;\n        } catch {\n          return false;\n        }\n      });\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * PKCE認証フローで使用するクッキーをクリアします\n   *\n   * @param cookies クッキーサービス\n   */\n  private clearPKCECookies(cookies: CookiesService): void {\n    cookies.delete(this.STATE_COOKIE);\n    cookies.delete(this.CODE_VERIFIER_COOKIE);\n  }\n\n  /**\n   * エラーコードに基づいてエラーレスポンスを処理します\n   *\n   * @param errorCode エラーコード\n   * @param error オプションのエラーオブジェクト\n   * @param errorDescription オプションのエラー説明\n   * @returns エラーを示すResultオブジェクト\n   */\n  private handleCallbackError(\n    errorCode: ErrorCode,\n    error?: AuthCallbackError | null,\n    errorDescription?: string | null\n  ): Result<string, ErrorCode> {\n    const message = error?.message || 'Unknown callback error';\n    const code = error?.code;\n    let errorCodeString: string | undefined = undefined; // string | undefined で初期化\n\n    // code の型をチェックして文字列に変換\n    if (typeof code === 'string') {\n      errorCodeString = code;\n    } else if (typeof code === 'number') {\n      errorCodeString = code.toString();\n    }\n    // code が null または undefined の場合、errorCodeString は undefined のまま\n\n    console.error(`${errorCode}: ${message}`, {\n      errorDescription,\n      errorCode: errorCodeString, // ここでは確実に string | undefined\n      originalError: error,\n    });\n\n    return Result.error<string, ErrorCode>(errorCode);\n  }\n}\n\nfunction onError({\n  error,\n  path,\n  code,\n}: {\n  error: string;\n  path: string;\n  code?: string;\n}) {\n  const url = new URL(path, 'http://localhost');\n\n  if (code) {\n    url.searchParams.set('code', code);\n  }\n\n  const errorMessage = getAuthErrorMessage({\n    error,\n    code,\n  });\n\n  url.searchParams.set('error', errorMessage);\n\n  return {\n    nextPath: url.toString().replace('http://localhost', ''),\n  };\n}\n\n/**\n * Checks if the given error message indicates a verifier error.\n * We check for this specific error because it's highly likely that the\n * user is trying to sign in using a different browser than the one they\n * used to request the sign in link. This is a common mistake, so we\n * want to provide a helpful error message.\n */\nfunction isVerifierError(error: string) {\n  const verifierErrors = [\n    'pkce_verifier',\n    'OTP',\n    'Verifier',\n    'PKCE',\n    'expired',\n  ];\n\n  return verifierErrors.some((verifierError) =>\n    error.toLowerCase().includes(verifierError.toLowerCase())\n  );\n}\n\n/**\n * @name getAuthErrorMessage\n * @description Get the auth error message from the error code\n * @param params\n */\nfunction getAuthErrorMessage(params: { error: string; code?: string }) {\n  const { error, code } = params;\n\n  if (isVerifierError(error)) {\n    return '認証セッションの有効期限が切れています。別のブラウザやデバイスで認証を試みた場合は、同じブラウザで最初から認証フローをやり直してください。';\n  }\n\n  if (code === 'PGRST301') {\n    return '認証に失敗しました。もう一度お試しください。';\n  }\n\n  // fallback error message\n  return error;\n}\n"]}