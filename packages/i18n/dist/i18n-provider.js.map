{"version":3,"sources":["../src/i18n-provider.tsx"],"names":["useState","useEffect","initializeI18nClient","I18nextProvider"],"mappings":";;;;;;AAwCA,SAAS,iBAAwC,GAAA;AAC/C,EAAI,IAAA,OAAO,MAAW,KAAA,WAAA,EAAoB,OAAA,IAAA;AAE1C,EAAM,MAAA,eAAA,GAAkB,QAAS,CAAA,cAAA,CAAe,eAAe,CAAA;AAC/D,EAAI,IAAA,CAAC,iBAAwB,OAAA,IAAA;AAE7B,EAAI,IAAA;AACF,IAAA,OAAO,KAAK,KAAM,CAAA,eAAA,CAAgB,YAAa,CAAA,eAAe,KAAK,EAAE,CAAA;AAAA,WAC9D,CAAG,EAAA;AACV,IAAQ,OAAA,CAAA,KAAA,CAAM,kCAAkC,CAAC,CAAA;AACjD,IAAO,OAAA,IAAA;AAAA;AAEX;AASO,SAAS,YAAa,CAAA;AAAA,EAC3B,QAAA;AAAA,EACA,QAAA;AAAA,EACA;AACF,CAGI,EAAA;AAEF,EAAA,MAAM,CAAC,IAAA,EAAM,OAAO,CAAA,GAAIA,eAAsB,IAAI,CAAA;AAGlD,EAAAC,eAAA,CAAU,MAAM;AACd,IAAA,MAAM,iBAAiB,iBAAkB,EAAA;AACzC,IAAqBC,qCAAA,CAAA,cAAA,IAAkB,UAAU,QAAQ,CAAA,CACtD,KAAK,OAAO,CAAA,CACZ,KAAM,CAAA,CAAC,GAAQ,KAAA;AACd,MAAQ,OAAA,CAAA,KAAA,CAAM,8BAA8B,GAAG,CAAA;AAAA,KAChD,CAAA;AAAA,GACF,EAAA,CAAC,QAAU,EAAA,QAAQ,CAAC,CAAA;AAGvB,EAAI,IAAA,CAAC,MAAa,OAAA,IAAA;AAGlB,EAAO,uBAAA,KAAA,CAAA,aAAA,CAACC,4BAAgB,EAAA,EAAA,IAAA,EAAA,EAAa,QAAS,CAAA;AAChD","file":"i18n-provider.js","sourcesContent":["/**\n * i18n-provider.tsx\n *\n * このファイルは、アプリケーション全体の国際化（i18n）機能を提供するReactコンポーネントを定義します。\n * 主な役割：\n * 1. サーバーサイドで生成された言語設定をクライアントサイドで読み取る\n * 2. i18nextの初期化を管理\n * 3. アプリケーション全体に翻訳機能を提供\n *\n * 使用例：\n * ```tsx\n * <I18nProvider settings={i18nSettings} resolver={loadTranslations}>\n *   <App />\n * </I18nProvider>\n * ```\n */\n\n'use client';\n\nimport type { InitOptions, i18n } from 'i18next';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport { I18nextProvider } from 'react-i18next';\n\nimport { initializeI18nClient } from './i18n.client';\n\n/**\n * 翻訳リソースを取得するための関数の型定義\n * lang: 言語コード（例：'en', 'ja'）\n * namespace: 翻訳のカテゴリー（例：'common', 'auth'）\n */\ntype Resolver = (\n  lang: string,\n  namespace: string\n) => Promise<Record<string, string>>;\n\n/**\n * サーバーサイドで生成された言語設定を取得する関数\n * HTMLに埋め込まれたscriptタグから設定を読み取ります\n */\nfunction getServerSettings(): InitOptions | null {\n  if (typeof window === 'undefined') return null;\n\n  const settingsElement = document.getElementById('i18n-settings');\n  if (!settingsElement) return null;\n\n  try {\n    return JSON.parse(settingsElement.getAttribute('data-settings') || '');\n  } catch (e) {\n    console.error('Failed to parse i18n settings:', e);\n    return null;\n  }\n}\n\n/**\n * i18n機能を提供するプロバイダーコンポーネント\n *\n * @param settings - i18nの基本設定（デフォルトの言語、サポートする言語など）\n * @param resolver - 翻訳ファイルを動的に読み込むための関数\n * @param children - 子コンポーネント\n */\nexport function I18nProvider({\n  settings,\n  children,\n  resolver,\n}: React.PropsWithChildren<{\n  settings: InitOptions;\n  resolver: Resolver;\n}>) {\n  // i18nインスタンスの状態を管理\n  const [i18n, setI18n] = useState<i18n | null>(null);\n\n  // コンポーネントのマウント時にi18nを初期化\n  useEffect(() => {\n    const serverSettings = getServerSettings();\n    initializeI18nClient(serverSettings ?? settings, resolver)\n      .then(setI18n)\n      .catch((err) => {\n        console.error('Failed to initialize i18n:', err);\n      });\n  }, [settings, resolver]);\n\n  // 初期化が完了するまで何も表示しない\n  if (!i18n) return null;\n\n  // 初期化完了後、翻訳機能を子コンポーネントに提供\n  return <I18nextProvider i18n={i18n}>{children}</I18nextProvider>;\n}\n"]}