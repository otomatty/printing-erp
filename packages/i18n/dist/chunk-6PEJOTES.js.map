{"version":3,"sources":["../src/i18n.client.ts"],"names":["i18next","resourcesToBackend","LanguageDetector","initReactI18next"],"mappings":";;;;;;;;;;;;;;AAiBA,IAAM,cAAiB,GAAA,EAAA;AAEvB,IAAI,SAAY,GAAA,CAAA;AAShB,eAAsB,oBAAA,CACpB,UACA,QACe,EAAA;AAEf,EAAA,MAAM,kBAA4B,EAAC;AACnC,EAAA,MAAM,mBAA6B,EAAC;AAEpC,EAAA,MAAMA,wBAEH,CAAA,GAAA;AAAA,IACCC,mCAAmB,CAAA,OAAO,QAAU,EAAA,SAAA,EAAW,QAAa,KAAA;AAC1D,MAAA,MAAM,IAAO,GAAA,MAAM,QAAS,CAAA,QAAA,EAAU,SAAS,CAAA;AAE/C,MAAA,IAAI,CAAC,eAAA,CAAgB,QAAS,CAAA,QAAQ,CAAG,EAAA;AACvC,QAAA,eAAA,CAAgB,KAAK,QAAQ,CAAA;AAAA;AAG/B,MAAA,IAAI,CAAC,gBAAA,CAAiB,QAAS,CAAA,SAAS,CAAG,EAAA;AACzC,QAAA,gBAAA,CAAiB,KAAK,SAAS,CAAA;AAAA;AAGjC,MAAO,OAAA,QAAA,CAAS,MAAM,IAAI,CAAA;AAAA,KAC3B;AAAA,IAGF,GAAI,CAAAC,iCAAgB,EAEpB,GAAI,CAAAC,6BAAgB,EAEpB,IAAK,CAAA;AAAA,IACJ,GAAG,QAAA;AAAA,IACH,SAAW,EAAA;AAAA,MACT,KAAO,EAAA,CAAC,SAAW,EAAA,QAAA,EAAU,WAAW,CAAA;AAAA,MACxC,MAAA,EAAQ,CAAC,QAAQ,CAAA;AAAA,MACjB,YAAc,EAAA;AAAA,KAChB;AAAA,IACA,aAAe,EAAA;AAAA,MACb,WAAa,EAAA;AAAA;AACf,GACD,CAAA;AAGH,EAAA,IAAI,aAAa,cAAgB,EAAA;AAC/B,IAAQ,OAAA,CAAA,KAAA,CAAM,CAA2B,wBAAA,EAAA,cAAc,CAAE,CAAA,CAAA;AACzD,IAAO,OAAAH,wBAAA;AAAA;AAIT,EAAA,IAAI,eAAgB,CAAA,MAAA,KAAW,CAAK,IAAA,gBAAA,CAAiB,WAAW,CAAG,EAAA;AACjE,IAAA,SAAA,EAAA;AACA,IAAM,MAAA,IAAI,MAAM,mCAAmC,CAAA;AAAA;AAGrD,EAAO,OAAAA,wBAAA;AACT","file":"chunk-6PEJOTES.js","sourcesContent":["/**\n * i18n.client.ts\n *\n * このファイルは、ブラウザ（クライアントサイド）でのi18n機能の初期化を担当します。\n * 主な役割：\n * 1. i18nextライブラリの初期化\n * 2. ブラウザの言語設定の検出\n * 3. 翻訳リソースの動的ロード\n * 4. React連携のセットアップ\n */\n\nimport i18next, { type InitOptions, type i18n } from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport resourcesToBackend from 'i18next-resources-to-backend';\nimport { initReactI18next } from 'react-i18next';\n\n// 初期化の最大試行回数\nconst MAX_ITERATIONS = 20;\n// 現在の試行回数\nlet iteration = 0;\n\n/**\n * クライアントサイドでi18nを初期化する関数\n *\n * @param settings - i18nの設定（言語、名前空間など）\n * @param resolver - 翻訳ファイルを動的に読み込むための関数\n * @returns 初期化されたi18nインスタンス\n */\nexport async function initializeI18nClient(\n  settings: InitOptions,\n  resolver: (lang: string, namespace: string) => Promise<object>\n): Promise<i18n> {\n  // ロード済みの言語と名前空間を追跡\n  const loadedLanguages: string[] = [];\n  const loadedNamespaces: string[] = [];\n\n  await i18next\n    // 翻訳リソースを動的にロードするためのプラグイン\n    .use(\n      resourcesToBackend(async (language, namespace, callback) => {\n        const data = await resolver(language, namespace);\n\n        if (!loadedLanguages.includes(language)) {\n          loadedLanguages.push(language);\n        }\n\n        if (!loadedNamespaces.includes(namespace)) {\n          loadedNamespaces.push(namespace);\n        }\n\n        return callback(null, data);\n      })\n    )\n    // ブラウザの言語を自動検出するプラグイン\n    .use(LanguageDetector)\n    // Reactとの連携用プラグイン\n    .use(initReactI18next)\n    // i18nextの初期化\n    .init({\n      ...settings,\n      detection: {\n        order: ['htmlTag', 'cookie', 'navigator'],\n        caches: ['cookie'],\n        lookupCookie: 'lang',\n      },\n      interpolation: {\n        escapeValue: false,\n      },\n    });\n\n  // 無限ループを防ぐため、一定回数で強制終了\n  if (iteration >= MAX_ITERATIONS) {\n    console.debug(`Max iterations reached: ${MAX_ITERATIONS}`);\n    return i18next;\n  }\n\n  // 必要な言語リソースがロードされていない場合は再試行\n  if (loadedLanguages.length === 0 || loadedNamespaces.length === 0) {\n    iteration++;\n    throw new Error('No languages or namespaces loaded');\n  }\n\n  return i18next;\n}\n"]}