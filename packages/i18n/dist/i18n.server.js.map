{"version":3,"sources":["../src/i18n.server.ts"],"names":["createInstance","resourcesToBackend","resolve","initReactI18next"],"mappings":"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","file":"i18n.server.js","sourcesContent":["/**\n * i18n.server.ts\n *\n * このファイルは、サーバーサイドでのi18n機能の初期化と言語設定の処理を担当します。\n * 主な役割：\n * 1. サーバーサイドレンダリング（SSR）時のi18n初期化\n * 2. React Server Components（RSC）でのi18nサポート\n * 3. ブラウザの言語設定（Accept-Language）の解析\n */\n\nimport { type InitOptions, createInstance, type i18n } from 'i18next';\nimport resourcesToBackend from 'i18next-resources-to-backend';\nimport { initReactI18next } from 'react-i18next/initReactI18next';\n\n/**\n * サーバーサイドでi18nを初期化する関数\n * SSRとRSCの両方で使用されます\n *\n * @param settings - i18nの設定（言語、名前空間など）\n * @param resolver - 翻訳ファイルを動的に読み込むための関数\n * @returns 初期化されたi18nインスタンス\n */\nexport async function initializeServerI18n(\n  settings: InitOptions,\n  resolver: (language: string, namespace: string) => Promise<object>\n): Promise<i18n> {\n  const i18nInstance = createInstance();\n  const loadedNamespaces = new Set<string>();\n\n  // i18nインスタンスの初期化と設定\n  await new Promise((resolve) => {\n    void i18nInstance\n      .use(\n        // 翻訳リソースを動的にロードするプラグイン\n        resourcesToBackend(async (language, namespace, callback) => {\n          try {\n            const data = await resolver(language, namespace);\n            loadedNamespaces.add(namespace);\n            return callback(null, data);\n          } catch (error) {\n            console.log(\n              `Error loading i18n file: locales/${language}/${namespace}.json`,\n              error\n            );\n            return callback(null, {});\n          }\n        })\n      )\n      // React連携の初期化を待機するプラグイン\n      .use({\n        type: '3rdParty',\n        init: async (i18next: typeof i18nInstance) => {\n          let iterations = 0;\n          const maxIterations = 100;\n\n          while (i18next.isInitializing) {\n            iterations++;\n            if (iterations > maxIterations) {\n              console.error(\n                `i18next is not initialized after ${maxIterations} iterations`\n              );\n              break;\n            }\n            await new Promise((resolve) => setTimeout(resolve, 1));\n          }\n\n          initReactI18next.init(i18next);\n          resolve(i18next);\n        },\n      })\n      .init(settings);\n  });\n\n  // 必要な全ての名前空間がロードされるまで待機\n  const namespaces = settings.ns as string[];\n  if (loadedNamespaces.size === namespaces.length) {\n    return i18nInstance;\n  }\n\n  const maxWaitTime = 0.1; // 100ミリ秒\n  const checkIntervalMs = 5; // 5ミリ秒\n\n  // 名前空間のロードを待機する関数\n  async function waitForNamespaces() {\n    const startTime = Date.now();\n    while (Date.now() - startTime < maxWaitTime) {\n      const allNamespacesLoaded = namespaces.every((ns) =>\n        loadedNamespaces.has(ns)\n      );\n      if (allNamespacesLoaded) return true;\n      await new Promise((resolve) => setTimeout(resolve, checkIntervalMs));\n    }\n    return false;\n  }\n\n  const success = await waitForNamespaces();\n  if (!success) {\n    console.warn(\n      `Not all namespaces were loaded after ${maxWaitTime}ms. Initialization may be incomplete.`\n    );\n  }\n\n  return i18nInstance;\n}\n\n/**\n * ブラウザから送信される Accept-Language ヘッダーを解析する関数\n *\n * @param languageHeaderValue - Accept-Language ヘッダーの値（例：'ja,en-US;q=0.9,en;q=0.8'）\n * @param acceptedLanguages - アプリケーションがサポートする言語のリスト\n * @returns サポートされている言語のリスト（優先度順）\n */\nexport function parseAcceptLanguageHeader(\n  languageHeaderValue: string | null | undefined,\n  acceptedLanguages: string[]\n): string[] {\n  if (!languageHeaderValue) return [];\n\n  const ignoreWildcard = true;\n\n  return languageHeaderValue\n    .split(',')\n    .map((lang): [number, string] => {\n      const [locale, q = 'q=1'] = lang.split(';');\n      if (!locale) return [0, ''];\n\n      const trimmedLocale = locale.trim();\n      const numQ = Number(q.replace(/q ?=/, ''));\n\n      return [Number.isNaN(numQ) ? 0 : numQ, trimmedLocale];\n    })\n    .sort(([q1], [q2]) => q2 - q1)\n    .flatMap(([_, locale]) => {\n      if (locale === '*' && ignoreWildcard) return [];\n\n      const languageSegment = locale.split('-')[0];\n      if (!languageSegment) return [];\n\n      try {\n        return acceptedLanguages.includes(languageSegment)\n          ? [languageSegment]\n          : [];\n      } catch {\n        return [];\n      }\n    });\n}\n"]}