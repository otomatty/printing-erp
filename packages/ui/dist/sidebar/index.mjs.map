{"version":3,"sources":["../../src/makerkit/%28context%29/sidebar.context.ts","../../src/makerkit/sidebar/index.tsx"],"names":["SidebarContext","createContext","_","Sidebar","props","collapsed","setCollapsed","useState","isExpandedRef","useRef","expandOnHover","sidebarSizeClassName","getSidebarSizeClassName","className","getClassNameBuilder","cn","containerClassName","ctx","onMouseEnter","onMouseLeave","isRadixPopupOpen","onRadixPopupClose","SidebarContent","children","customClassName","useContext","SidebarGroup","label","collapsible","sidebarCollapsed","isGroupCollapsed","setIsGroupCollapsed","id","useId","Title","Wrapper","If","ChevronDown","SidebarDivider","SidebarItem","end","path","Icon","currentPath","usePathname","active","isRouteActive","variant","TooltipProvider","Tooltip","TooltipTrigger","Button","Link","TooltipContent","cva","isExpanded","getRadixPopup","callback","element","observer","SidebarNavigation","config","item","index","Trans","child"],"mappings":"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","file":"index.mjs","sourcesContent":["import { createContext } from 'react';\n\nconst SidebarContext = createContext<{\n  collapsed: boolean;\n  setCollapsed: (collapsed: boolean) => void;\n}>({\n  collapsed: false,\n  setCollapsed: (_) => _,\n});\n\nexport { SidebarContext };\n","'use client';\n\nimport { useContext, useId, useRef, useState } from 'react';\n\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\n\nimport { cva } from 'class-variance-authority';\nimport { ChevronDown } from 'lucide-react';\nimport type { z } from 'zod';\n\nimport { cn, isRouteActive } from '../../lib/utils';\nimport { Button } from '../../shadcn/button';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '../../shadcn/tooltip';\nimport { SidebarContext } from '../(context)/sidebar.context';\nimport { If } from '../if';\nimport type { NavigationConfigSchema } from '../navigation-config/schema';\nimport { Trans } from '../trans';\n\nexport type SidebarConfig = z.infer<typeof NavigationConfigSchema>;\n\nexport { SidebarContext };\n\n/**\n * @deprecated\n * This component is deprecated and will be removed in a future version.\n * Please use the Shadcn Sidebar component instead.\n */\nexport function Sidebar(props: {\n  collapsed?: boolean;\n  expandOnHover?: boolean;\n  className?: string;\n  children:\n    | React.ReactNode\n    | ((props: {\n        collapsed: boolean;\n        setCollapsed: (collapsed: boolean) => void;\n      }) => React.ReactNode);\n}) {\n  const [collapsed, setCollapsed] = useState(props.collapsed ?? false);\n  const isExpandedRef = useRef<boolean>(false);\n\n  const expandOnHover =\n    props.expandOnHover ??\n    process.env.NEXT_PUBLIC_EXPAND_SIDEBAR_ON_HOVER === 'true';\n\n  const sidebarSizeClassName = getSidebarSizeClassName(\n    collapsed,\n    isExpandedRef.current\n  );\n\n  const className = getClassNameBuilder(\n    cn(props.className ?? '', sidebarSizeClassName, {})\n  )();\n\n  const containerClassName = cn(sidebarSizeClassName, 'bg-inherit', {\n    'max-w-[4rem]': expandOnHover && isExpandedRef.current,\n  });\n\n  const ctx = { collapsed, setCollapsed };\n\n  const onMouseEnter =\n    props.collapsed && expandOnHover\n      ? () => {\n          setCollapsed(false);\n          isExpandedRef.current = true;\n        }\n      : undefined;\n\n  const onMouseLeave =\n    props.collapsed && expandOnHover\n      ? () => {\n          if (!isRadixPopupOpen()) {\n            setCollapsed(true);\n            isExpandedRef.current = false;\n          } else {\n            onRadixPopupClose(() => {\n              setCollapsed(true);\n              isExpandedRef.current = false;\n            });\n          }\n        }\n      : undefined;\n\n  return (\n    <SidebarContext.Provider value={ctx}>\n      <div\n        className={containerClassName}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n      >\n        <div aria-expanded={!collapsed} className={className}>\n          {typeof props.children === 'function'\n            ? props.children(ctx)\n            : props.children}\n        </div>\n      </div>\n    </SidebarContext.Provider>\n  );\n}\n\nexport function SidebarContent({\n  children,\n  className: customClassName,\n}: React.PropsWithChildren<{\n  className?: string;\n}>) {\n  const { collapsed } = useContext(SidebarContext);\n\n  const className = cn(\n    'flex w-full flex-col space-y-1.5 py-1',\n    customClassName,\n    {\n      'px-4': !collapsed,\n      'px-2': collapsed,\n    }\n  );\n\n  return <div className={className}>{children}</div>;\n}\n\nexport function SidebarGroup({\n  label,\n  collapsed = false,\n  collapsible = true,\n  children,\n}: React.PropsWithChildren<{\n  label: string | React.ReactNode;\n  collapsible?: boolean;\n  collapsed?: boolean;\n}>) {\n  const { collapsed: sidebarCollapsed } = useContext(SidebarContext);\n  const [isGroupCollapsed, setIsGroupCollapsed] = useState(collapsed);\n  const id = useId();\n\n  const Title = (props: React.PropsWithChildren) => {\n    if (sidebarCollapsed) {\n      return null;\n    }\n\n    return (\n      <span className={'text-muted-foreground text-xs font-semibold uppercase'}>\n        {props.children}\n      </span>\n    );\n  };\n\n  const Wrapper = () => {\n    const className = cn(\n      'px-container group flex items-center justify-between space-x-2.5',\n      {\n        'py-2.5': !sidebarCollapsed,\n      }\n    );\n\n    if (collapsible) {\n      return (\n        <button\n          type=\"button\"\n          aria-expanded={!isGroupCollapsed}\n          aria-controls={id}\n          onClick={() => setIsGroupCollapsed(!isGroupCollapsed)}\n          className={className}\n        >\n          <Title>{label}</Title>\n\n          <If condition={collapsible}>\n            <ChevronDown\n              className={cn('h-3 transition duration-300', {\n                'rotate-180': !isGroupCollapsed,\n              })}\n            />\n          </If>\n        </button>\n      );\n    }\n\n    return (\n      <div className={className}>\n        <Title>{label}</Title>\n      </div>\n    );\n  };\n\n  return (\n    <div\n      className={cn('flex flex-col', {\n        'gap-y-2 py-1': !collapsed,\n      })}\n    >\n      <Wrapper />\n\n      <If condition={collapsible ? !isGroupCollapsed : true}>\n        <div id={id} className={'flex flex-col space-y-1.5'}>\n          {children}\n        </div>\n      </If>\n    </div>\n  );\n}\n\nexport function SidebarDivider() {\n  return (\n    <div className={'dark:border-dark-800 my-2 border-t border-gray-100'} />\n  );\n}\n\nexport function SidebarItem({\n  end,\n  path,\n  children,\n  Icon,\n}: React.PropsWithChildren<{\n  path: string;\n  Icon: React.ReactNode;\n  end?: boolean | ((path: string) => boolean);\n}>) {\n  const { collapsed } = useContext(SidebarContext);\n  const currentPath = usePathname() ?? '';\n\n  const active = isRouteActive(path, currentPath, end ?? false);\n  const variant = active ? 'secondary' : 'ghost';\n\n  return (\n    <TooltipProvider delayDuration={0}>\n      <Tooltip disableHoverableContent>\n        <TooltipTrigger asChild>\n          <Button\n            asChild\n            className={cn(\n              'active:bg-secondary/60 flex w-full text-sm shadow-none',\n              {\n                'justify-start space-x-2.5': !collapsed,\n                'hover:bg-initial': active,\n              }\n            )}\n            size={'sm'}\n            variant={variant}\n          >\n            <Link href={path}>\n              {Icon}\n              <span\n                className={cn('w-auto transition-opacity duration-300', {\n                  'w-0 opacity-0': collapsed,\n                })}\n              >\n                {children}\n              </span>\n            </Link>\n          </Button>\n        </TooltipTrigger>\n\n        <If condition={collapsed}>\n          <TooltipContent side={'right'} sideOffset={10}>\n            {children}\n          </TooltipContent>\n        </If>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}\n\nfunction getClassNameBuilder(className: string) {\n  return cva([\n    cn(\n      'group/sidebar transition-width fixed box-content flex h-screen w-2/12 flex-col bg-inherit backdrop-blur-xs duration-200',\n      className\n    ),\n  ]);\n}\n\nfunction getSidebarSizeClassName(collapsed: boolean, isExpanded: boolean) {\n  return cn(['z-50 flex w-full flex-col'], {\n    'dark:shadow-primary/20 lg:w-[17rem]': !collapsed,\n    'lg:w-[4rem]': collapsed,\n    shadow: isExpanded,\n  });\n}\n\nfunction getRadixPopup() {\n  return document.querySelector('[data-radix-popper-content-wrapper]');\n}\n\nfunction isRadixPopupOpen() {\n  return getRadixPopup() !== null;\n}\n\nfunction onRadixPopupClose(callback: () => void) {\n  const element = getRadixPopup();\n\n  if (element) {\n    const observer = new MutationObserver(() => {\n      if (!getRadixPopup()) {\n        callback();\n\n        if (element.parentElement) {\n          observer.disconnect();\n        }\n      }\n    });\n\n    if (element.parentElement) {\n      observer.observe(element.parentElement, {\n        childList: true,\n        subtree: true,\n      });\n    }\n  }\n}\n\nexport function SidebarNavigation({\n  config,\n}: React.PropsWithChildren<{\n  config: SidebarConfig;\n}>) {\n  return (\n    <>\n      {config.routes.map((item, index) => {\n        if ('divider' in item) {\n          // biome-ignore lint/suspicious/noArrayIndexKey: 設定は静的なので安全\n          return <SidebarDivider key={`divider-${index}`} />;\n        }\n\n        if ('children' in item) {\n          return (\n            <SidebarGroup\n              key={item.label}\n              label={<Trans i18nKey={item.label} defaults={item.label} />}\n              collapsible={item.collapsible}\n              collapsed={item.collapsed}\n            >\n              {item.children.map((child) => {\n                if ('collapsible' in child && child.collapsible) {\n                  throw new Error(\n                    'Collapsible groups are not supported in the old Sidebar. Please migrate to the new Sidebar.'\n                  );\n                }\n\n                if ('path' in child) {\n                  return (\n                    <SidebarItem\n                      key={child.path}\n                      end={child.end}\n                      path={child.path}\n                      Icon={child.Icon}\n                    >\n                      <Trans i18nKey={child.label} defaults={child.label} />\n                    </SidebarItem>\n                  );\n                }\n              })}\n            </SidebarGroup>\n          );\n        }\n      })}\n    </>\n  );\n}\n"]}