{"version":3,"sources":["../../src/makerkit/top-loading-bar-indicator/index.tsx","../../src/makerkit/global-loader/index.tsx"],"names":["running","TopLoadingBarIndicator","ref","createRef","useEffect","loadingBarRef","LoadingBar","GlobalLoader","displayLogo","fullPage","displaySpinner","displayTopLoadingBar","children","If","LoadingOverlay"],"mappings":"+RAOA,IAAIA,CAAU,CAAA,KAAA,CAEP,SAASC,CAAAA,EAAyB,CACvC,IAAMC,CAAMC,CAAAA,SAAAA,EAEZ,CAAA,OAAAC,SAAU,CAAA,IAAM,CACd,GAAI,CAACF,CAAAA,CAAI,OAAWF,EAAAA,CAAAA,CAClB,OAGFA,CAAAA,CAAU,KAEV,IAAMK,CAAAA,CAAgBH,CAAI,CAAA,OAAA,CAE1B,OAAAG,CAAAA,CAAc,eAAgB,CAAA,CAAA,CAAG,GAAG,CAAA,CAE7B,IAAM,CACXA,CAAc,CAAA,QAAA,EACdL,CAAAA,CAAAA,CAAU,MACZ,CACF,CAAG,CAAA,CAACE,CAAG,CAAC,CAGN,CAAA,KAAA,CAAA,aAAA,CAACI,CAAA,CAAA,CACC,SAAW,CAAA,YAAA,CACX,MAAQ,CAAA,CAAA,CACR,YAAa,CACb,CAAA,MAAA,CAAM,IACN,CAAA,KAAA,CAAO,EACP,CAAA,GAAA,CAAKJ,CACP,CAAA,CAEJ,CCnCO,SAASK,CAAa,CAAA,CAC3B,WAAAC,CAAAA,CAAAA,CAAc,KACd,CAAA,QAAA,CAAAC,CAAW,CAAA,KAAA,CACX,cAAAC,CAAAA,CAAAA,CAAiB,IACjB,CAAA,oBAAA,CAAAC,CAAuB,CAAA,IAAA,CACvB,QAAAC,CAAAA,CACF,CAKI,CAAA,CACF,OACE,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,CAAA,IAAA,CACE,KAACC,CAAAA,aAAAA,CAAAA,GAAAA,CAAA,CAAG,SAAA,CAAWF,CACb,CAAA,CAAA,KAAA,CAAA,aAAA,CAACV,CAAA,CAAA,IAAuB,CAC1B,CAAA,CAEA,KAACY,CAAAA,aAAAA,CAAAA,GAAAA,CAAA,CAAG,SAAA,CAAWH,CACb,CAAA,CAAA,KAAA,CAAA,aAAA,CAAC,KACC,CAAA,CAAA,SAAA,CACE,qHAGF,CAAA,CAAA,KAAA,CAAA,aAAA,CAACI,GAAA,CAAA,CAAe,WAAaN,CAAAA,CAAAA,CAAa,QAAUC,CAAAA,CAAAA,CAAU,CAE7DG,CAAAA,CACH,CACF,CACF,CAEJ","file":"index.mjs","sourcesContent":["'use client';\n\nimport { createRef, useEffect } from 'react';\n\nimport type { LoadingBarRef } from 'react-top-loading-bar';\nimport LoadingBar from 'react-top-loading-bar';\n\nlet running = false;\n\nexport function TopLoadingBarIndicator() {\n  const ref = createRef<LoadingBarRef>();\n\n  useEffect(() => {\n    if (!ref.current || running) {\n      return;\n    }\n\n    running = true;\n\n    const loadingBarRef = ref.current;\n\n    loadingBarRef.continuousStart(0, 300);\n\n    return () => {\n      loadingBarRef.complete();\n      running = false;\n    };\n  }, [ref]);\n\n  return (\n    <LoadingBar\n      className={'bg-primary'}\n      height={4}\n      waitingTime={0}\n      shadow\n      color={''}\n      ref={ref}\n    />\n  );\n}\n","import { If } from '../if';\nimport { LoadingOverlay } from '../loading-overlay';\nimport { TopLoadingBarIndicator } from '../top-loading-bar-indicator';\n\nexport function GlobalLoader({\n  displayLogo = false,\n  fullPage = false,\n  displaySpinner = true,\n  displayTopLoadingBar = true,\n  children,\n}: React.PropsWithChildren<{\n  displayLogo?: boolean;\n  fullPage?: boolean;\n  displaySpinner?: boolean;\n  displayTopLoadingBar?: boolean;\n}>) {\n  return (\n    <>\n      <If condition={displayTopLoadingBar}>\n        <TopLoadingBarIndicator />\n      </If>\n\n      <If condition={displaySpinner}>\n        <div\n          className={\n            'zoom-in-80 animate-in fade-in slide-in-from-bottom-12 flex flex-1 flex-col items-center justify-center duration-500'\n          }\n        >\n          <LoadingOverlay displayLogo={displayLogo} fullPage={fullPage} />\n\n          {children}\n        </div>\n      </If>\n    </>\n  );\n}\n"]}