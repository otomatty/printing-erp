{"version":3,"sources":["../../src/shadcn/alert-dialog/index.tsx","../../src/makerkit/version-updater/index.tsx"],"names":["AlertDialog","AlertDialogPortal","AlertDialogOverlay","className","props","ref","cn","AlertDialogContent","AlertDialogHeader","AlertDialogFooter","AlertDialogTitle","AlertDialogDescription","AlertDialogAction","buttonVariants","AlertDialogCancel","version","DEFAULT_REFETCH_INTERVAL","VERSION_UPDATER_REFETCH_INTERVAL_SECONDS","VersionUpdater","data","useVersionUpdater","dismissed","setDismissed","useState","showDialog","setShowDialog","useEffect","RocketIcon","Trans","Button","interval","refetchInterval","staleTime","useQuery","currentVersion","oldVersion"],"mappings":"+WAQA,IAAMA,CAAAA,CAAmC,CAIzC,CAAA,IAAA,CAAA,IAAMC,CAAyC,CAAA,CAAA,CAAA,MAAA,CAEzCC,CAA2B,CAAA,CAAA,CAAA,UAAA,CAG/B,CAAC,CAAE,SAAAC,CAAAA,CAAAA,CAAW,GAAGC,CAAM,CAAA,CAAGC,CAC1B,GAAA,CAAA,CAAA,aAAA,CAAsB,CAArB,CAAA,OAAA,CAAA,CACC,UAAWC,GACT,CAAA,wJAAA,CACAH,CACF,CAAA,CACC,GAAGC,CAAAA,CACJ,IAAKC,CACP,CAAA,CACD,CACDH,CAAAA,CAAAA,CAAmB,WAAmC,CAAA,CAAA,CAAA,OAAA,CAAQ,WAE9D,CAAA,IAAMK,CAA2B,CAAA,CAAA,CAAA,UAAA,CAG/B,CAAC,CAAE,SAAAJ,CAAAA,CAAAA,CAAW,GAAGC,CAAM,CAAA,CAAGC,CAC1B,GAAA,CAAA,CAAA,aAAA,CAACJ,CAAA,CAAA,IAAA,CACC,gBAACC,CAAA,CAAA,IAAmB,CACpB,CAAA,CAAA,CAAA,aAAA,CAAsB,CAArB,CAAA,OAAA,CAAA,CACC,IAAKG,CACL,CAAA,SAAA,CAAWC,GACT,CAAA,6fAAA,CACAH,CACF,CAAA,CACC,GAAGC,CAAAA,CACN,CACF,CACD,CACDG,CAAAA,CAAAA,CAAmB,WAAmC,CAAA,CAAA,CAAA,OAAA,CAAQ,YAE9D,IAAMC,CAAAA,CAAoB,CAAC,CACzB,SAAAL,CAAAA,CAAAA,CACA,GAAGC,CACL,CACE,GAAA,CAAA,CAAA,aAAA,CAAC,KACC,CAAA,CAAA,SAAA,CAAWE,GACT,CAAA,kDAAA,CACAH,CACF,CACC,CAAA,GAAGC,CACN,CAAA,CAAA,CAEFI,CAAkB,CAAA,WAAA,CAAc,mBAEhC,CAAA,IAAMC,CAAoB,CAAA,CAAC,CACzB,SAAA,CAAAN,CACA,CAAA,GAAGC,CACL,CACE,GAAA,CAAA,CAAA,aAAA,CAAC,KACC,CAAA,CAAA,SAAA,CAAWE,GACT,CAAA,+DAAA,CACAH,CACF,CACC,CAAA,GAAGC,CACN,CAAA,CAAA,CAEFK,CAAkB,CAAA,WAAA,CAAc,oBAEhC,IAAMC,CAAAA,CAAyB,CAG7B,CAAA,UAAA,CAAA,CAAC,CAAE,SAAA,CAAAP,CAAW,CAAA,GAAGC,CAAM,CAAA,CAAGC,CAC1B,GAAA,CAAA,CAAA,aAAA,CAAsB,CAArB,CAAA,KAAA,CAAA,CACC,IAAKA,CACL,CAAA,SAAA,CAAWC,GAAG,CAAA,uBAAA,CAAyBH,CAAS,CAAA,CAC/C,GAAGC,CAAAA,CACN,CACD,CAAA,CACDM,CAAiB,CAAA,WAAA,CAAmC,CAAM,CAAA,KAAA,CAAA,WAAA,CAE1D,IAAMC,CAA+B,CAAA,CAAA,CAAA,UAAA,CAGnC,CAAC,CAAE,SAAAR,CAAAA,CAAAA,CAAW,GAAGC,CAAM,CAAGC,CAAAA,CAAAA,GAC1B,CAAsB,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAArB,CACC,GAAA,CAAKA,EACL,SAAWC,CAAAA,GAAAA,CAAG,+BAAiCH,CAAAA,CAAS,CACvD,CAAA,GAAGC,EACN,CACD,CAAA,CACDO,CAAuB,CAAA,WAAA,CACA,CAAY,CAAA,WAAA,CAAA,WAAA,CAEnC,IAAMC,CAA0B,CAAA,CAAA,CAAA,UAAA,CAG9B,CAAC,CAAE,SAAAT,CAAAA,CAAAA,CAAW,GAAGC,CAAM,CAAGC,CAAAA,CAAAA,GAC1B,CAAsB,CAAA,aAAA,CAAA,CAAA,CAAA,MAAA,CAArB,CACC,GAAA,CAAKA,EACL,SAAWC,CAAAA,GAAAA,CAAGO,GAAe,EAAA,CAAGV,CAAS,CAAA,CACxC,GAAGC,CAAAA,CACN,CACD,CAAA,CACDQ,CAAkB,CAAA,WAAA,CAAmC,CAAO,CAAA,MAAA,CAAA,WAAA,CAE5D,IAAME,CAA0B,CAAA,CAAA,CAAA,UAAA,CAG9B,CAAC,CAAE,SAAAX,CAAAA,CAAAA,CAAW,GAAGC,CAAM,CAAGC,CAAAA,CAAAA,GAC1B,CAAsB,CAAA,aAAA,CAAA,CAAA,CAAA,MAAA,CAArB,CACC,GAAA,CAAKA,EACL,SAAWC,CAAAA,GAAAA,CACTO,GAAe,CAAA,CAAE,OAAS,CAAA,SAAU,CAAC,CACrC,CAAA,cAAA,CACAV,CACF,CAAA,CACC,GAAGC,CAAAA,CACN,CACD,CACDU,CAAAA,CAAAA,CAAkB,WAAmC,CAAA,CAAA,CAAA,MAAA,CAAO,WCzG5D,CAAA,IAAIC,CAAyB,CAAA,IAAA,CAMvBC,CAA2B,CAAA,GAAA,CAK3BC,CACJ,CAAA,OAAA,CAAQ,GAAI,CAAA,oDAAA,CAEP,SAASC,CAAed,CAAAA,CAAAA,CAA0C,CACvE,GAAM,CAAE,IAAA,CAAAe,CAAK,CAAIC,CAAAA,CAAAA,CAAkBhB,CAAK,CAAA,CAClC,CAACiB,CAAAA,CAAWC,CAAY,CAAIC,CAAAA,QAAAA,CAAS,KAAK,CAAA,CAC1C,CAACC,CAAAA,CAAYC,CAAa,CAAA,CAAIF,QAAkB,CAAA,KAAK,CAM3D,CAAA,OAJAG,SAAU,CAAA,IAAM,CACdD,CAAcN,CAAAA,CAAAA,EAAM,SAAa,EAAA,KAAK,EACxC,CAAA,CAAG,CAACA,CAAM,EAAA,SAAS,CAAC,CAAA,CAEhB,CAACA,CAAAA,EAAM,WAAaE,CACf,CAAA,IAAA,CAIP,KAACrB,CAAAA,aAAAA,CAAAA,CAAAA,CAAA,CAAY,IAAA,CAAMwB,CAAY,CAAA,YAAA,CAAcC,CAC3C,CAAA,CAAA,KAAA,CAAA,aAAA,CAAClB,CAAA,CAAA,IAAA,CACC,KAACC,CAAAA,aAAAA,CAAAA,CAAAA,CAAA,KACC,KAACE,CAAAA,aAAAA,CAAAA,CAAAA,CAAA,CAAiB,SAAA,CAAW,2BAC3B,CAAA,CAAA,KAAA,CAAA,aAAA,CAACiB,UAAA,CAAA,CAAW,SAAW,CAAA,KAAA,CAAO,CAC9B,CAAA,KAAA,CAAA,aAAA,CAAC,MACC,CAAA,IAAA,CAAA,KAAA,CAAA,aAAA,CAACC,IAAA,CAAM,OAAA,CAAQ,4BAA6B,CAAA,CAC9C,CACF,CAAA,CAEA,KAACjB,CAAAA,aAAAA,CAAAA,CAAAA,CAAA,IACC,CAAA,KAAA,CAAA,aAAA,CAACiB,GAAA,CAAA,CAAM,OAAQ,CAAA,uCAAA,CAAwC,CACzD,CACF,CAAA,CAEA,KAACnB,CAAAA,aAAAA,CAAAA,CAAAA,CAAA,IACC,CAAA,KAAA,CAAA,aAAA,CAACoB,IAAA,CACC,OAAA,CAAS,SACT,CAAA,OAAA,CAAS,IAAM,CACbJ,EAAc,KAAK,CAAA,CACnBH,CAAa,CAAA,IAAI,EACnB,CAAA,CAAA,CAEA,KAACM,CAAAA,aAAAA,CAAAA,GAAAA,CAAA,CAAM,OAAA,CAAQ,aAAc,CAAA,CAC/B,CAEA,CAAA,KAAA,CAAA,aAAA,CAACC,IAAA,CAAO,OAAA,CAAS,IAAM,MAAA,CAAO,QAAS,CAAA,MAAA,EACrC,CAAA,CAAA,KAAA,CAAA,aAAA,CAACD,GAAA,CAAA,CAAM,OAAQ,CAAA,+BAAA,CAAgC,CACjD,CACF,CACF,CACF,CAEJ,CAEA,SAASR,CAAkBhB,CAAAA,CAAAA,CAA2C,EAAC,CAAG,CACxE,IAAM0B,CAAWb,CAAAA,CAAAA,CACb,MAAOA,CAAAA,CAAwC,EAC/CD,CAEEe,CAAAA,CAAAA,CAAAA,CAAmB3B,CAAM,CAAA,oBAAA,EAAwB0B,CAAY,EAAA,GAAA,CAG7DE,EAAYD,CAAkB,CAAA,CAAA,CAEpC,OAAOE,GAAAA,CAAS,CACd,QAAA,CAAU,CAAC,iBAAiB,CAAA,CAC5B,SAAAD,CAAAA,CAAAA,CACA,MAAQD,CAAAA,CAAAA,CACR,2BAA6B,CAAA,IAAA,CAC7B,eAAAA,CAAAA,CAAAA,CACA,WAAa,CAAA,IAAA,CACb,OAAS,CAAA,SAAY,CAEnB,IAAMG,CAAAA,CAAiB,KADN,CAAA,MAAM,KAAM,CAAA,UAAU,CACD,EAAA,IAAA,EAChCC,CAAAA,CAAAA,CAAapB,CAEnB,CAAA,OAAAA,CAAUmB,CAAAA,CAAAA,CAIH,CACL,cAAAA,CAAAA,CAAAA,CACA,UAAAC,CAAAA,CAAAA,CACA,SALgBA,CAAAA,CAAAA,GAAe,IAAQD,EAAAA,CAAAA,GAAmBC,CAM5D,CACF,CACF,CAAC,CACH","file":"index.mjs","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog';\n\nimport { cn } from '../../lib/utils/cn';\nimport { buttonVariants } from '../button';\n\nconst AlertDialog = AlertDialogPrimitive.Root;\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger;\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal;\n\nconst AlertDialogOverlay = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      'fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n));\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;\n\nconst AlertDialogContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n));\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      'flex flex-col space-y-2 text-center sm:text-left',\n      className\n    )}\n    {...props}\n  />\n);\nAlertDialogHeader.displayName = 'AlertDialogHeader';\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',\n      className\n    )}\n    {...props}\n  />\n);\nAlertDialogFooter.displayName = 'AlertDialogFooter';\n\nconst AlertDialogTitle = React.forwardRef<\n  HTMLHeadingElement,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn('text-lg font-semibold', className)}\n    {...props}\n  />\n));\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;\n\nconst AlertDialogDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n));\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName;\n\nconst AlertDialogAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n));\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;\n\nconst AlertDialogCancel = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: 'outline' }),\n      'mt-2 sm:mt-0',\n      className\n    )}\n    {...props}\n  />\n));\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n};\n","'use client';\n\nimport { useEffect, useState } from 'react';\n\nimport { useQuery } from '@tanstack/react-query';\nimport { RocketIcon } from 'lucide-react';\n\nimport {\n  AlertDialog,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '../../shadcn/alert-dialog';\nimport { Button } from '../../shadcn/button';\nimport { Trans } from '../trans';\n\n/**\n * Current version of the app that is running\n */\nlet version: string | null = null;\n\n/**\n * Default interval time in seconds to check for new version\n * By default, it is set to 120 seconds\n */\nconst DEFAULT_REFETCH_INTERVAL = 120;\n\n/**\n * Default interval time in seconds to check for new version\n */\nconst VERSION_UPDATER_REFETCH_INTERVAL_SECONDS =\n  process.env.NEXT_PUBLIC_VERSION_UPDATER_REFETCH_INTERVAL_SECONDS;\n\nexport function VersionUpdater(props: { intervalTimeInSecond?: number }) {\n  const { data } = useVersionUpdater(props);\n  const [dismissed, setDismissed] = useState(false);\n  const [showDialog, setShowDialog] = useState<boolean>(false);\n\n  useEffect(() => {\n    setShowDialog(data?.didChange ?? false);\n  }, [data?.didChange]);\n\n  if (!data?.didChange || dismissed) {\n    return null;\n  }\n\n  return (\n    <AlertDialog open={showDialog} onOpenChange={setShowDialog}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle className={'flex items-center gap-x-2'}>\n            <RocketIcon className={'h-4'} />\n            <span>\n              <Trans i18nKey=\"common:newVersionAvailable\" />\n            </span>\n          </AlertDialogTitle>\n\n          <AlertDialogDescription>\n            <Trans i18nKey=\"common:newVersionAvailableDescription\" />\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n\n        <AlertDialogFooter>\n          <Button\n            variant={'outline'}\n            onClick={() => {\n              setShowDialog(false);\n              setDismissed(true);\n            }}\n          >\n            <Trans i18nKey=\"common:back\" />\n          </Button>\n\n          <Button onClick={() => window.location.reload()}>\n            <Trans i18nKey=\"common:newVersionSubmitButton\" />\n          </Button>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n\nfunction useVersionUpdater(props: { intervalTimeInSecond?: number } = {}) {\n  const interval = VERSION_UPDATER_REFETCH_INTERVAL_SECONDS\n    ? Number(VERSION_UPDATER_REFETCH_INTERVAL_SECONDS)\n    : DEFAULT_REFETCH_INTERVAL;\n\n  const refetchInterval = (props.intervalTimeInSecond ?? interval) * 1000;\n\n  // start fetching new version after half of the interval time\n  const staleTime = refetchInterval / 2;\n\n  return useQuery({\n    queryKey: ['version-updater'],\n    staleTime,\n    gcTime: refetchInterval,\n    refetchIntervalInBackground: true,\n    refetchInterval,\n    initialData: null,\n    queryFn: async () => {\n      const response = await fetch('/version');\n      const currentVersion = await response.text();\n      const oldVersion = version;\n\n      version = currentVersion;\n\n      const didChange = oldVersion !== null && currentVersion !== oldVersion;\n\n      return {\n        currentVersion,\n        oldVersion,\n        didChange,\n      };\n    },\n  });\n}\n"]}