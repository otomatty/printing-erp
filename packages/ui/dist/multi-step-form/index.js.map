{"version":3,"sources":["../../src/makerkit/multi-step-form/index.tsx"],"names":["MultiStepFormContext","createContext","MultiStepForm","schema","form","onSubmit","children","className","steps","useMemo","React","child","MultiStepFormStep","header","MultiStepFormHeader","footer","MultiStepFormFooter","stepNames","step","multiStepForm","useMultiStepForm","cn","index","isActive","AnimatedStep","MultiStepFormContextProvider","props","ctx","useMultiStepFormContext","asChild","Slot","Slottable","context","useContext","state","setState","useState","isStepValid","useCallback","currentStepName","z","currentStepSchema","currentStepData","nextStep","e","isValid","keys","field","key","prevState","prevStep","goToStep","errors","mutation","useMutation","createStepSchema","direction","currentIndex","shouldRender","setShouldRender","stepRef","useRef","useEffect","timer","focusableElement","baseClasses","visibilityClasses","transformClasses"],"mappings":"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","file":"index.js","sourcesContent":["'use client';\n\nimport React, {\n  type HTMLProps,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport { Slot, Slottable } from '@radix-ui/react-slot';\nimport { useMutation } from '@tanstack/react-query';\nimport type { Path, UseFormReturn } from 'react-hook-form';\nimport { z } from 'zod';\n\nimport { cn } from '../../lib/utils';\n\ninterface MultiStepFormProps<T extends z.ZodType> {\n  schema: T;\n  form: UseFormReturn<z.infer<T>>;\n  onSubmit: (data: z.infer<T>) => void;\n  useStepTransition?: boolean;\n  className?: string;\n}\n\ntype StepProps = React.PropsWithChildren<\n  {\n    name: string;\n    asChild?: boolean;\n  } & React.HTMLProps<HTMLDivElement>\n>;\n\nconst MultiStepFormContext = createContext<ReturnType<\n  typeof useMultiStepForm\n> | null>(null);\n\n/**\n * @name MultiStepForm\n * @description Multi-step form component for React\n * @param schema\n * @param form\n * @param onSubmit\n * @param children\n * @param className\n * @constructor\n */\nexport function MultiStepForm<T extends z.ZodType>({\n  schema,\n  form,\n  onSubmit,\n  children,\n  className,\n}: React.PropsWithChildren<MultiStepFormProps<T>>) {\n  const steps = useMemo(\n    () =>\n      React.Children.toArray(children).filter(\n        (child): child is React.ReactElement<StepProps> =>\n          React.isValidElement(child) && child.type === MultiStepFormStep\n      ),\n    [children]\n  );\n\n  const header = useMemo(() => {\n    return React.Children.toArray(children).find(\n      (child) =>\n        React.isValidElement(child) && child.type === MultiStepFormHeader\n    );\n  }, [children]);\n\n  const footer = useMemo(() => {\n    return React.Children.toArray(children).find(\n      (child) =>\n        React.isValidElement(child) && child.type === MultiStepFormFooter\n    );\n  }, [children]);\n\n  const stepNames = steps.map((step) => step.props.name);\n  const multiStepForm = useMultiStepForm(schema, form, stepNames, onSubmit);\n\n  return (\n    <MultiStepFormContext.Provider value={multiStepForm}>\n      <form\n        onSubmit={form.handleSubmit(onSubmit)}\n        className={cn(className, 'flex size-full flex-col overflow-hidden')}\n      >\n        {header}\n\n        <div className=\"relative transition-transform duration-500\">\n          {steps.map((step, index) => {\n            const isActive = index === multiStepForm.currentStepIndex;\n\n            return (\n              <AnimatedStep\n                key={step.props.name}\n                direction={multiStepForm.direction}\n                isActive={isActive}\n                index={index}\n                currentIndex={multiStepForm.currentStepIndex}\n              >\n                {step}\n              </AnimatedStep>\n            );\n          })}\n        </div>\n\n        {footer}\n      </form>\n    </MultiStepFormContext.Provider>\n  );\n}\n\nexport function MultiStepFormContextProvider(props: {\n  children: (context: ReturnType<typeof useMultiStepForm>) => React.ReactNode;\n}) {\n  const ctx = useMultiStepFormContext();\n\n  if (Array.isArray(props.children)) {\n    const [child] = props.children;\n\n    return (\n      child as (context: ReturnType<typeof useMultiStepForm>) => React.ReactNode\n    )(ctx);\n  }\n\n  return props.children(ctx);\n}\n\nexport const MultiStepFormStep: React.FC<\n  React.PropsWithChildren<\n    {\n      asChild?: boolean;\n      ref?: React.Ref<HTMLDivElement>;\n    } & HTMLProps<HTMLDivElement>\n  >\n> = function MultiStepFormStep({ children, asChild, ...props }) {\n  const Cmp = asChild ? Slot : 'div';\n\n  return (\n    <Cmp {...props}>\n      <Slottable>{children}</Slottable>\n    </Cmp>\n  );\n};\n\nexport function useMultiStepFormContext<Schema extends z.ZodType>() {\n  const context = useContext(MultiStepFormContext) as ReturnType<\n    typeof useMultiStepForm<Schema>\n  >;\n\n  if (!context) {\n    throw new Error(\n      'useMultiStepFormContext must be used within a MultiStepForm'\n    );\n  }\n\n  return context;\n}\n\n/**\n * @name useMultiStepForm\n * @description Hook for multi-step forms\n * @param schema\n * @param form\n * @param stepNames\n * @param onSubmit\n */\nexport function useMultiStepForm<Schema extends z.ZodType>(\n  schema: Schema,\n  form: UseFormReturn<z.infer<Schema>>,\n  stepNames: string[],\n  onSubmit: (data: z.infer<Schema>) => void\n) {\n  const [state, setState] = useState({\n    currentStepIndex: 0,\n    direction: undefined as 'forward' | 'backward' | undefined,\n  });\n\n  const isStepValid = useCallback(() => {\n    const currentStepName = stepNames[state.currentStepIndex] as Path<\n      z.TypeOf<Schema>\n    >;\n\n    if (schema instanceof z.ZodObject) {\n      const currentStepSchema = schema.shape[currentStepName] as z.ZodType;\n\n      // the user may not want to validate the current step\n      // or the step doesn't contain any form field\n      if (!currentStepSchema) {\n        return true;\n      }\n\n      const currentStepData = form.getValues(currentStepName) ?? {};\n      const result = currentStepSchema.safeParse(currentStepData);\n\n      return result.success;\n    }\n\n    throw new Error(`Unsupported schema type: ${schema.constructor.name}`);\n  }, [schema, form, stepNames, state.currentStepIndex]);\n\n  const nextStep = useCallback(\n    <Ev extends React.SyntheticEvent>(e: Ev) => {\n      // prevent form submission when the user presses Enter\n      // or if the user forgets [type=\"button\"] on the button\n      e.preventDefault();\n\n      const isValid = isStepValid();\n\n      if (!isValid) {\n        const currentStepName = stepNames[state.currentStepIndex] as Path<\n          z.TypeOf<Schema>\n        >;\n\n        if (schema instanceof z.ZodObject) {\n          const currentStepSchema = schema.shape[currentStepName] as z.ZodType;\n\n          if (currentStepSchema) {\n            const fields = Object.keys(\n              (currentStepSchema as z.ZodObject<never>).shape\n            );\n\n            const keys = fields.map((field) => `${currentStepName}.${field}`);\n\n            // trigger validation for all fields in the current step\n            for (const key of keys) {\n              void form.trigger(key as Path<z.TypeOf<Schema>>);\n            }\n\n            return;\n          }\n        }\n      }\n\n      if (isValid && state.currentStepIndex < stepNames.length - 1) {\n        setState((prevState) => {\n          return {\n            ...prevState,\n            direction: 'forward',\n            currentStepIndex: prevState.currentStepIndex + 1,\n          };\n        });\n      }\n    },\n    [isStepValid, state.currentStepIndex, stepNames, schema, form]\n  );\n\n  const prevStep = useCallback(\n    <Ev extends React.SyntheticEvent>(e: Ev) => {\n      // prevent form submission when the user presses Enter\n      // or if the user forgets [type=\"button\"] on the button\n      e.preventDefault();\n\n      if (state.currentStepIndex > 0) {\n        setState((prevState) => {\n          return {\n            ...prevState,\n            direction: 'backward',\n            currentStepIndex: prevState.currentStepIndex - 1,\n          };\n        });\n      }\n    },\n    [state.currentStepIndex]\n  );\n\n  const goToStep = useCallback(\n    (index: number) => {\n      if (index >= 0 && index < stepNames.length && isStepValid()) {\n        setState((prevState) => {\n          return {\n            ...prevState,\n            direction:\n              index > prevState.currentStepIndex ? 'forward' : 'backward',\n            currentStepIndex: index,\n          };\n        });\n      }\n    },\n    [isStepValid, stepNames.length]\n  );\n\n  const isValid = form.formState.isValid;\n  const errors = form.formState.errors;\n\n  const mutation = useMutation({\n    mutationFn: () => {\n      return form.handleSubmit(onSubmit)();\n    },\n  });\n\n  return useMemo(\n    () => ({\n      form,\n      currentStep: stepNames[state.currentStepIndex] as string,\n      currentStepIndex: state.currentStepIndex,\n      totalSteps: stepNames.length,\n      isFirstStep: state.currentStepIndex === 0,\n      isLastStep: state.currentStepIndex === stepNames.length - 1,\n      nextStep,\n      prevStep,\n      goToStep,\n      direction: state.direction,\n      isStepValid,\n      isValid,\n      errors,\n      mutation,\n    }),\n    [\n      form,\n      mutation,\n      stepNames,\n      state.currentStepIndex,\n      state.direction,\n      nextStep,\n      prevStep,\n      goToStep,\n      isStepValid,\n      isValid,\n      errors,\n    ]\n  );\n}\n\nexport const MultiStepFormHeader: React.FC<\n  React.PropsWithChildren<\n    {\n      asChild?: boolean;\n    } & HTMLProps<HTMLDivElement>\n  >\n> = function MultiStepFormHeader({ children, asChild, ...props }) {\n  const Cmp = asChild ? Slot : 'div';\n\n  return (\n    <Cmp {...props}>\n      <Slottable>{children}</Slottable>\n    </Cmp>\n  );\n};\n\nexport const MultiStepFormFooter: React.FC<\n  React.PropsWithChildren<\n    {\n      asChild?: boolean;\n    } & HTMLProps<HTMLDivElement>\n  >\n> = function MultiStepFormFooter({ children, asChild, ...props }) {\n  const Cmp = asChild ? Slot : 'div';\n\n  return (\n    <Cmp {...props}>\n      <Slottable>{children}</Slottable>\n    </Cmp>\n  );\n};\n\n/**\n * @name createStepSchema\n * @description Create a schema for a multi-step form\n * @param steps\n */\nexport function createStepSchema<T extends Record<string, z.ZodType>>(\n  steps: T\n) {\n  return z.object(steps);\n}\n\ninterface AnimatedStepProps {\n  direction: 'forward' | 'backward' | undefined;\n  isActive: boolean;\n  index: number;\n  currentIndex: number;\n}\n\nfunction AnimatedStep({\n  isActive,\n  direction,\n  children,\n  index,\n  currentIndex,\n}: React.PropsWithChildren<AnimatedStepProps>) {\n  const [shouldRender, setShouldRender] = useState(isActive);\n  const stepRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (isActive) {\n      setShouldRender(true);\n    } else {\n      const timer = setTimeout(() => setShouldRender(false), 300);\n\n      return () => clearTimeout(timer);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (isActive && stepRef.current) {\n      const focusableElement = stepRef.current.querySelector(\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n      );\n\n      if (focusableElement) {\n        (focusableElement as HTMLElement).focus();\n      }\n    }\n  }, [isActive]);\n\n  if (!shouldRender) {\n    return null;\n  }\n\n  const baseClasses =\n    ' top-0 left-0 w-full h-full transition-all duration-300 ease-in-out animate-in fade-in zoom-in-95';\n\n  const visibilityClasses = isActive ? 'opacity-100' : 'opacity-0 absolute';\n\n  const transformClasses = cn(\n    'translate-x-0',\n    isActive\n      ? {}\n      : {\n          '-translate-x-full': direction === 'forward' || index < currentIndex,\n          'translate-x-full': direction === 'backward' || index > currentIndex,\n        }\n  );\n\n  const className = cn(baseClasses, visibilityClasses, transformClasses);\n\n  return (\n    <div ref={stepRef} className={className} aria-hidden={!isActive}>\n      {children}\n    </div>\n  );\n}\n"]}