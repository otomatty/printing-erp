{"version":3,"sources":["../src/shadcn/button/index.tsx"],"names":["buttonVariants","cva","Button","e","className","variant","size","asChild","props","ref","Slot","cn"],"mappings":"miBAcMA,CAAiBC,CAAAA,0BAAAA,CACrB,0SACA,CACE,QAAA,CAAU,CACR,OAAS,CAAA,CACP,QACE,kEACF,CAAA,WAAA,CACE,gFACF,OACE,CAAA,2FAAA,CACF,UACE,yEACF,CAAA,KAAA,CAAO,+CACP,IAAM,CAAA,iDACR,EACA,IAAM,CAAA,CACJ,QAAS,eACT,CAAA,EAAA,CAAI,8BACJ,EAAI,CAAA,sBAAA,CACJ,KAAM,SACR,CACF,CACA,CAAA,eAAA,CAAiB,CACf,OAAA,CAAS,UACT,IAAM,CAAA,SACR,CACF,CACF,CAAA,CA6CMC,EAAeC,YACnB,CAAA,UAAA,CAAA,CAAC,CAAE,SAAAC,CAAAA,CAAAA,CAAW,QAAAC,CAAS,CAAA,IAAA,CAAAC,EAAM,OAAAC,CAAAA,CAAAA,CAAU,MAAO,GAAGC,CAAM,CAAGC,CAAAA,CAAAA,GAGtDN,YAFWI,CAAAA,aAAAA,CAAAA,CAAAA,CAAUG,eAAO,QAE3B,CAAA,CACC,UAAWC,kBAAGX,CAAAA,CAAAA,CAAe,CAAE,OAAAK,CAAAA,CAAAA,CAAS,KAAAC,CAAM,CAAA,SAAA,CAAAF,CAAU,CAAC,CAAC,EAC1D,GAAKK,CAAAA,CAAAA,CACJ,GAAGD,CACN,CAAA,CAGN,EACAN,CAAAA,CAAO,WAAc,CAAA,QAAA","file":"chunk-EVOK3DU6.js","sourcesContent":["// @ts-nocheck - Radix UIのSlotコンポーネントと型の互換性問題を回避\nimport * as React from 'react';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '../../lib/utils/cn';\n\n/**\n * ボタンのスタイルバリエーションを定義するための設定オブジェクトです。\n * class-variance-authorityを使用して、異なるバリアントとサイズを管理します。\n *\n * @property {object} variants - ボタンのバリアント（見た目）とサイズの設定\n * @property {object} defaultVariants - デフォルトのバリアントとサイズ\n */\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        destructive:\n          'bg-destructive text-destructive-foreground shadow-2xs hover:bg-destructive/90',\n        outline:\n          'border border-input bg-background shadow-2xs hover:bg-accent hover:text-accent-foreground',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-2xs hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-9 px-4 py-2',\n        sm: 'h-8 rounded-md px-3 text-xs',\n        lg: 'h-10 rounded-md px-8',\n        icon: 'h-9 w-9',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\n/**\n * ボタンコンポーネントのプロパティの型定義です。\n * HTMLButtonElementの属性とボタンバリアントのプロパティを継承します。\n *\n * @property {boolean} [asChild] - 子要素をボタンとして扱うかどうか\n * @property {string} [variant] - ボタンの見た目のバリアント（'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link'）\n * @property {string} [size] - ボタンのサイズ（'default' | 'sm' | 'lg' | 'icon'）\n */\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\n/**\n * 汎用的なボタンコンポーネントです。\n * 様々なスタイルバリエーションとサイズをサポートし、アクセシビリティにも配慮しています。\n *\n * @example\n * ```tsx\n * // デフォルトのボタン\n * <Button>クリック</Button>\n *\n * // バリアントとサイズを指定\n * <Button variant=\"destructive\" size=\"lg\">削除</Button>\n *\n * // アウトラインスタイル\n * <Button variant=\"outline\">編集</Button>\n *\n * // アイコンボタン\n * <Button size=\"icon\">\n *   <IconComponent />\n * </Button>\n *\n * // カスタムクラスの追加\n * <Button className=\"my-custom-class\">カスタム</Button>\n * ```\n *\n * @property {string} [variant] - ボタンの見た目のバリアント\n * @property {string} [size] - ボタンのサイズ\n * @property {boolean} [asChild=false] - 子要素をボタンとして扱うかどうか\n * @property {string} [className] - 追加のCSSクラス\n */\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : 'button';\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };\n"]}