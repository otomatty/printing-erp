{"version":3,"sources":["../../src/shadcn/breadcrumb/index.tsx","../../src/makerkit/app-breadcrumbs/index.tsx"],"names":["Breadcrumb","props","BreadcrumbList","className","cn","BreadcrumbItem","BreadcrumbLink","asChild","Slot","BreadcrumbSeparator","children","ChevronRight","BreadcrumbEllipsis","MoreHorizontal","unslugify","slug","AppBreadcrumbs","splitPath","usePathname","values","maxDepth","Ellipsis","showEllipsis","visiblePaths","path","index","label","Trans","Fragment","If"],"mappings":"mVAUA,IAAMA,EAAa,CAAC,CAAE,GAAGC,CAAM,IAC7B,KAAC,CAAA,aAAA,CAAA,KAAA,CAAA,CAAI,aAAW,YAAc,CAAA,GAAGA,EAAO,CAE1CD,CAAAA,CAAAA,CAAW,YAAc,YAIzB,CAAA,IAAME,EAAiB,CAAC,CAAE,UAAAC,CAAW,CAAA,GAAGF,CAAM,CAC5C,GAAA,KAAA,CAAA,aAAA,CAAC,IACC,CAAA,CAAA,SAAA,CAAWG,mBACT,0FACAD,CAAAA,CACF,EACC,GAAGF,CAAAA,CACN,EAEFC,CAAe,CAAA,WAAA,CAAc,iBAI7B,IAAMG,CAAAA,CAAiB,CAAC,CAAE,SAAA,CAAAF,EAAW,GAAGF,CAAM,IAC5C,KAAC,CAAA,aAAA,CAAA,IAAA,CAAA,CACC,UAAWG,kBAAG,CAAA,kCAAA,CAAoCD,CAAS,CAC1D,CAAA,GAAGF,EACN,CAEFI,CAAAA,CAAAA,CAAe,YAAc,gBAM7B,CAAA,IAAMC,EAAiB,CAAC,CACtB,QAAAC,CACA,CAAA,SAAA,CAAAJ,EACA,GAAGF,CACL,IAII,KAHWM,CAAAA,aAAAA,CAAAA,CAAAA,CAAUC,cAAO,CAAA,GAAA,CAG3B,CACC,SAAWJ,CAAAA,kBAAAA,CAAG,0CAA2CD,CAAS,CAAA,CACjE,GAAGF,CACN,CAAA,CAAA,CAGJK,EAAe,WAAc,CAAA,gBAAA,CAe7B,IAAMG,EAAsB,CAAC,CAC3B,QAAAC,CAAAA,CAAAA,CACA,UAAAP,CACA,CAAA,GAAGF,CACL,CACE,GAAA,KAAA,CAAA,aAAA,CAAC,MACC,IAAK,CAAA,cAAA,CACL,cAAY,MACZ,CAAA,SAAA,CAAWG,mBAAG,6BAA+BD,CAAAA,CAAS,EACrD,GAAGF,CAAAA,CAAAA,CAEHS,GAAY,KAACC,CAAAA,aAAAA,CAAAA,wBAAAA,CAAA,IAAa,CAC7B,CAAA,CAEFF,EAAoB,WAAc,CAAA,qBAAA,CAElC,IAAMG,CAAqB,CAAA,CAAC,CAC1B,SAAAT,CAAAA,CAAAA,CACA,GAAGF,CACL,CAAA,GACE,oBAAC,MACC,CAAA,CAAA,IAAA,CAAK,eACL,aAAY,CAAA,MAAA,CACZ,UAAWG,kBAAG,CAAA,0CAAA,CAA4CD,CAAS,CAAA,CAClE,GAAGF,CAEJ,CAAA,CAAA,KAAA,CAAA,aAAA,CAACY,2BAAA,CAAe,SAAA,CAAU,UAAU,CACpC,CAAA,KAAA,CAAA,aAAA,CAAC,QAAK,SAAU,CAAA,SAAA,CAAA,CAAU,MAAI,CAChC,CAAA,CAEFD,EAAmB,WAAc,CAAA,oBAAA,CCpFjC,IAAME,CAAaC,CAAAA,CAAAA,EAAiBA,CAAK,CAAA,OAAA,CAAQ,KAAM,GAAG,CAAA,CAEnD,SAASC,CAAef,CAAAA,CAAAA,CAG5B,CAED,IAAMgB,CAAAA,CADWC,wBACU,CAAA,KAAA,CAAM,GAAG,CAAE,CAAA,MAAA,CAAO,OAAO,CAC9CC,CAAAA,CAAAA,CAASlB,EAAM,MAAU,EAAA,EACzBmB,CAAAA,CAAAA,CAAWnB,EAAM,QAAY,EAAA,CAAA,CAE7BoB,EACJ,KAAChB,CAAAA,aAAAA,CAAAA,CAAAA,CAAA,KACC,KAACO,CAAAA,aAAAA,CAAAA,CAAAA,CAAA,CAAmB,SAAU,CAAA,SAAA,CAAU,CAC1C,CAGIU,CAAAA,CAAAA,CAAeL,EAAU,MAASG,CAAAA,CAAAA,CAElCG,EAAeD,CAChB,CAAA,CAACL,EAAU,CAAC,CAAA,CAAG,GAAGA,CAAU,CAAA,KAAA,CAAM,CAACG,CAAW,CAAA,CAAC,CAAC,CACjDH,CAAAA,CAAAA,CAEJ,OACE,KAACjB,CAAAA,aAAAA,CAAAA,CAAAA,CAAA,KACC,KAACE,CAAAA,aAAAA,CAAAA,CAAAA,CAAA,KACEqB,CAAa,CAAA,GAAA,CAAI,CAACC,CAAMC,CAAAA,CAAAA,GAAU,CACjC,IAAMC,EACJF,CAAQL,IAAAA,CAAAA,CACNA,EAAOK,CAAI,CAAA,CAEX,oBAACG,kBAAA,CAAA,CACC,QAAS,CAAiBb,cAAAA,EAAAA,CAAAA,CAAUU,CAAI,CAAC,CAAA,CAAA,CACzC,SAAUV,CAAUU,CAAAA,CAAI,EAC1B,CAGJ,CAAA,OACE,oBAACI,cAAA,CAAA,CAAS,IAAKJ,CACb,CAAA,CAAA,KAAA,CAAA,aAAA,CAACnB,EAAA,CAAe,SAAA,CAAW,yBACzB,KAACwB,CAAAA,aAAAA,CAAAA,kBAAAA,CAAA,CACC,SAAWJ,CAAAA,CAAAA,CAAQF,EAAa,MAAS,CAAA,CAAA,CACzC,SAAUG,CAEV,CAAA,CAAA,KAAA,CAAA,aAAA,CAACpB,EAAA,CACC,IAAA,CAAM,CAAIW,CAAAA,EAAAA,CAAAA,CAAU,MAAM,CAAGA,CAAAA,CAAAA,CAAU,QAAQO,CAAI,CAAA,CAAI,CAAC,CAAE,CAAA,IAAA,CAAK,GAAG,CAAC,CAAA,CAAA,CAAA,CAElEE,CACH,CACF,CACF,EAECD,CAAU,GAAA,CAAA,EAAKH,GACd,KACE,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,CAAA,IAAA,CAAA,KAAA,CAAA,aAAA,CAACb,EAAA,IAAoB,CAAA,CACpBY,CACH,CAGF,CAAA,KAAA,CAAA,aAAA,CAACQ,mBAAA,CAAG,SAAA,CAAWJ,IAAUF,CAAa,CAAA,MAAA,CAAS,GAC7C,KAACd,CAAAA,aAAAA,CAAAA,CAAAA,CAAA,IAAoB,CACvB,CACF,CAEJ,CAAC,CACH,CACF,CAEJ","file":"index.js","sourcesContent":["import type * as React from 'react';\nimport { Slot } from '@radix-ui/react-slot';\nimport { ChevronRight, MoreHorizontal } from 'lucide-react';\n\nimport { cn } from '../../lib/utils/cn';\n\ntype BreadcrumbProps = React.ComponentPropsWithoutRef<'nav'> & {\n  separator?: React.ReactNode;\n};\n\nconst Breadcrumb = ({ ...props }: BreadcrumbProps) => (\n  <nav aria-label=\"breadcrumb\" {...props} />\n);\nBreadcrumb.displayName = 'Breadcrumb';\n\ntype BreadcrumbListProps = React.ComponentPropsWithoutRef<'ol'>;\n\nconst BreadcrumbList = ({ className, ...props }: BreadcrumbListProps) => (\n  <ol\n    className={cn(\n      'flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5',\n      className\n    )}\n    {...props}\n  />\n);\nBreadcrumbList.displayName = 'BreadcrumbList';\n\ntype BreadcrumbItemProps = React.ComponentPropsWithoutRef<'li'>;\n\nconst BreadcrumbItem = ({ className, ...props }: BreadcrumbItemProps) => (\n  <li\n    className={cn('inline-flex items-center gap-1.5', className)}\n    {...props}\n  />\n);\nBreadcrumbItem.displayName = 'BreadcrumbItem';\n\ntype BreadcrumbLinkProps = React.ComponentPropsWithoutRef<'a'> & {\n  asChild?: boolean;\n};\n\nconst BreadcrumbLink = ({\n  asChild,\n  className,\n  ...props\n}: BreadcrumbLinkProps) => {\n  const Comp = asChild ? Slot : 'a';\n\n  return (\n    <Comp\n      className={cn('transition-colors hover:text-foreground', className)}\n      {...props}\n    />\n  );\n};\nBreadcrumbLink.displayName = 'BreadcrumbLink';\n\ntype BreadcrumbPageProps = React.ComponentPropsWithoutRef<'a'>;\n\nconst BreadcrumbPage = ({ className, ...props }: BreadcrumbPageProps) => (\n  <a\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn('font-normal text-foreground', className)}\n    {...props}\n  />\n);\nBreadcrumbPage.displayName = 'BreadcrumbPage';\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<'li'>) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn('[&>svg]:w-3.5 [&>svg]:h-3.5', className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n);\nBreadcrumbSeparator.displayName = 'BreadcrumbSeparator';\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn('flex h-9 w-9 items-center justify-center', className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n);\nBreadcrumbEllipsis.displayName = 'BreadcrumbElipssis';\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n};\n","'use client';\n\nimport { Fragment } from 'react';\n\nimport { usePathname } from 'next/navigation';\n\nimport {\n  Breadcrumb,\n  BreadcrumbEllipsis,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbSeparator,\n} from '../../shadcn/breadcrumb';\nimport { If } from '../if';\nimport { Trans } from '../trans';\n\nconst unslugify = (slug: string) => slug.replace(/-/g, ' ');\n\nexport function AppBreadcrumbs(props: {\n  values?: Record<string, string>;\n  maxDepth?: number;\n}) {\n  const pathName = usePathname();\n  const splitPath = pathName.split('/').filter(Boolean);\n  const values = props.values ?? {};\n  const maxDepth = props.maxDepth ?? 6;\n\n  const Ellipsis = (\n    <BreadcrumbItem>\n      <BreadcrumbEllipsis className=\"h-4 w-4\" />\n    </BreadcrumbItem>\n  );\n\n  const showEllipsis = splitPath.length > maxDepth;\n\n  const visiblePaths = showEllipsis\n    ? ([splitPath[0], ...splitPath.slice(-maxDepth + 1)] as string[])\n    : splitPath;\n\n  return (\n    <Breadcrumb>\n      <BreadcrumbList>\n        {visiblePaths.map((path, index) => {\n          const label =\n            path in values ? (\n              values[path]\n            ) : (\n              <Trans\n                i18nKey={`common:routes.${unslugify(path)}`}\n                defaults={unslugify(path)}\n              />\n            );\n\n          return (\n            <Fragment key={path}>\n              <BreadcrumbItem className={'capitalize lg:text-xs'}>\n                <If\n                  condition={index < visiblePaths.length - 1}\n                  fallback={label}\n                >\n                  <BreadcrumbLink\n                    href={`/${splitPath.slice(0, splitPath.indexOf(path) + 1).join('/')}`}\n                  >\n                    {label}\n                  </BreadcrumbLink>\n                </If>\n              </BreadcrumbItem>\n\n              {index === 0 && showEllipsis && (\n                <>\n                  <BreadcrumbSeparator />\n                  {Ellipsis}\n                </>\n              )}\n\n              <If condition={index !== visiblePaths.length - 1}>\n                <BreadcrumbSeparator />\n              </If>\n            </Fragment>\n          );\n        })}\n      </BreadcrumbList>\n    </Breadcrumb>\n  );\n}\n"]}